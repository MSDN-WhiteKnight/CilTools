<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CilTools.Runtime</name>
    </assembly>
    <members>
        <member name="T:CilTools.Runtime.ClrAssemblyInfo">
            <summary>
            Represents an assembly in the external CLR instance
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.InnerModule">
            <summary>
            Gets the underlying ClrMD module object
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.AssemblyReader">
            <summary>
            Gets the assembly reader that was used to read this instance
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.FullName">
            <summary>
            Gets the display name of the assembly
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetName">
            <summary>
            Gets an AssemblyName for this assembly
            </summary>
            <returns>An object that contains the fully parsed display name for this assembly</returns>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.Location">
            <summary>
            Gets the full path to the PE file containing this assembly, or an empty string if the assembly wasn't loaded from file.
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.CodeBase">
            <summary>
            Gets the full path to the PE file containing this assembly, or an empty string if the assembly wasn't loaded from file.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveType(System.Int32,System.Type[],System.Type[])">
            <summary>
            Returns the type identified by the specified metadata token, in the context defined by the specified generic parameters.
            </summary>
            <remarks>Generic parameters are ignored in this implementation.</remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveType(System.Int32)">
            <summary>
            Returns the type identified by the specified metadata token.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveMethod(System.Int32,System.Type[],System.Type[])">
            <summary>
            Returns the method or constructor identified by the specified metadata token, in the context defined by the 
            specified generic parameters.
            </summary>
            <remarks>Generic parameters are ignored in this implementation.</remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveMethod(System.Int32)">
            <summary>
            Returns the method or constructor identified by the specified metadata token.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveField(System.Int32,System.Type[],System.Type[])">
            <summary>
            Returns the field identified by the specified metadata token, in the context defined by the specified generic parameters.
            </summary>
            <remarks>Generic parameters are ignored in this implementation.</remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveField(System.Int32)">
            <summary>
            Returns the field identified by the specified metadata token.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveMember(System.Int32,System.Type[],System.Type[])">
            <summary>
            Returns the type or member identified by the specified metadata token, in the context defined by the specified 
            generic parameters.
            </summary>
            <remarks>Generic parameters are ignored in this implementation.</remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveMember(System.Int32)">
            <summary>
            Returns the type or member identified by the specified metadata token.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveSignature(System.Int32)">
            <summary>
            Returns the signature blob identified by a metadata token (not implemented).
            </summary>
            <exception cref="T:System.NotImplementedException">This implementation always throws</exception>
            <returns>An array of bytes representing the signature blob.</returns>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.ResolveString(System.Int32)">
            <summary>
            Returns the string identified by the specified metadata token (not implemented).
            </summary>
            <returns>This implementation always returns <c>null</c></returns>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.EnumerateMembers">
            <summary>
            Gets the collection of all members defined in this assembly
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.EnumerateMethods">
            <summary>
            Gets the collection of all methods defined in this assembly
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetTypes">
            <summary>
            Gets the types defined in this assembly.
            </summary>
            <returns>An array that contains all the types that are defined in this assembly.</returns>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetType(System.String)">
            <summary>
            Gets the <c>Type</c> object that represents the specified type.
            </summary>
            <param name="name">The full name of the type.</param>
            <returns>An object that represents the specified type, or <c>null</c> if the type is not found.</returns>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetType(System.String,System.Boolean)">
            <summary>
            Gets the <c>Type</c> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.
            </summary>
            <param name="name">The full name of the type.</param>
            <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
            <returns>An object that represents the specified type.</returns>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the <c>Type</c> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.
            </summary>
            <param name="name">The full name of the type.</param>
            <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
            <param name="ignoreCase">true to ignore the case of the type name; otherwise, false.</param>
            <returns>An object that represents the specified type.</returns>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.ExportedTypes">
            <summary>
            Gets a collection of the public types defined in this assembly that are visible outside the assembly.
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyInfo.GetExportedTypes">
            <summary>
            Gets the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <returns>An array that represents the types defined in this assembly that are visible outside the assembly.</returns>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.IsDynamic">
            <summary>
            Gets a value that indicates whether the current assembly was generated dynamically at runtime by using reflection emit.
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyInfo.ReflectionOnly">
            <summary>
            Gets a boolean value indicating whether this assembly was loaded into the reflection-only context.
            </summary>
            <value>This implementation always returns <c>true</c></value>
        </member>
        <member name="T:CilTools.Runtime.ClrAssemblyReader">
            <summary>
            Reads information about assemblies in the CLR isntances of external processes using ClrMD
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.GetDynamicMethods(System.Diagnostics.Process)">
            <summary>
            Gets the pseudo-assembly that represents the collection of dynamic methods in the specified process
            </summary>
            <param name="process">Source process</param>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.EnumerateMethods(System.Diagnostics.Process)">
            <summary>
            Gets the collection of all methods in the specified process
            </summary>
            <param name="process">Source process</param>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.EnumerateModuleMethods(System.Diagnostics.Process,System.String)">
            <summary>
            Gets the collection of all methods defined in the specified module of the process
            </summary>
            <param name="process">Source process</param>
            <param name="modulename">Name of PE module file (without full path), or an empty string to use main module</param>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.#ctor(Microsoft.Diagnostics.Runtime.ClrRuntime)">
            <summary>
            Creates <c>ClrAssemblyReader</c> to read information from the specified CLR instance
            </summary>
            <param name="r">Source CLR instance</param>
        </member>
        <member name="P:CilTools.Runtime.ClrAssemblyReader.SourceRuntime">
            <summary>
            Gets the CLR instance associated with this <c>ClrAssemblyReader</c>
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.Read(System.String)">
            <summary>
            Gets the assembly information object for the specified module name
            </summary>
            <param name="modulename">Name of PE module file (without full path)</param>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.Read(Microsoft.Diagnostics.Runtime.ClrModule)">
            <summary>
            Gets the assembly information object for the specified ClrMD module object
            </summary>
            <param name="module">ClrMD module object</param>
        </member>
        <member name="M:CilTools.Runtime.ClrAssemblyReader.GetDynamicMethods">
            <summary>
            Gets the pseudo-assembly that represents the collection of dynamic methods in the process containing CLR instance
            </summary>
        </member>
        <member name="T:CilTools.Runtime.ClrDynamicMethod">
            <summary>
            Represents information about a dynamic method in the external CLR instance
            </summary>
        </member>
        <member name="T:CilTools.Runtime.ClrMethodInfo">
            <summary>
            Represents information about the method in an external CLR instance
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.InnerMethod">
            <summary>
            Gets the underlying ClrMD method object
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.ReturnType">
            <summary>
            Gets the method's returned type
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.TokenResolver">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetBytecode">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.MaxStackSize">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.MaxStackSizeSpecified">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetLocalVarSignature">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetExceptionBlocks">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetMethodImplementationFlags">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetParameters">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.MethodHandle">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.DeclaringType">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.GetCustomAttributes(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CilTools.Runtime.ClrMethodInfo.IsDefined(System.Type,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.MemberType">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.ReflectedType">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.MetadataToken">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.InitLocals">
            <inheritdoc/>
        </member>
        <member name="P:CilTools.Runtime.ClrMethodInfo.InitLocalsSpecified">
            <inheritdoc/>
        </member>
        <member name="T:CilTools.Runtime.ClrStackFrameInfo">
            <summary>
            Represents a single frame in the callstack of .NET application. The stack frame contains information about the called method 
            and the location of the IL code executed within that method
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrStackFrameInfo.Method">
            <summary>
            Gets the method corresponding to this stack frame. The value could be null if this frame is a special frame not 
            corresponding to a managed method, or if the library failed to construct MethodBase object for the called method.
            </summary>
        </member>
        <member name="P:CilTools.Runtime.ClrStackFrameInfo.ILOffset">
            <summary>
            Gets the offset, in bytes, of the beginning of the IL code executed by this frame, relative to the beginning of the method body. 
            </summary>
            <remarks>
            The library cannot accurately determine the currently executed instruction in every case, because the resulting native code 
            could be optimized by JIT. As a result, the currently executed code is presented as the starting and ending offsets.
            </remarks>
        </member>
        <member name="P:CilTools.Runtime.ClrStackFrameInfo.ILOffsetEnd">
            <summary>
            Gets the offset, in bytes, of the end of the IL code executed by this frame, relative to the beginning of the method body. 
            </summary>
            <remarks>
            The library cannot accurately determine the currently executed instruction in every case, because the resulting native code 
            could be optimized by JIT. As a result, the currently executed code is presented as the starting and ending offsets.
            </remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrStackFrameInfo.ToString">
            <summary>
            Gets the full text representation of this stack frame 
            </summary>
            <remarks>
            The full text representation contains full signature of the called method, including argument types. 
            If this frame is not a call to a managed method, returns the name of the special frame from debugger API.
            </remarks>
        </member>
        <member name="M:CilTools.Runtime.ClrStackFrameInfo.ToString(System.Boolean)">
            <summary>
            Gets the text representation of this stack frame 
            </summary>
            <param name="full">Indicates whether the method should return full text representation</param>
            <remarks>
            The full text representation contains full signature of the called method, including argument types. 
            The short text representation only contains the method's name. 
            If this frame is not a call to a managed method, returns the name of the special frame from debugger API.
            </remarks>
        </member>
        <member name="T:CilTools.Runtime.ClrThreadInfo">
            <summary>
            Represents the information about the managed thread in the external process CLR instance
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrThreadInfo.Get(Microsoft.Diagnostics.Runtime.ClrRuntime,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},CilTools.Runtime.ClrAssemblyReader)">
            <summary>
            Gets the information about managed threads in the specified CLR instance 
            </summary>
            <param name="runtime">The CLR isntance to fetch thread information from</param>
            <param name="assemblies">
            The optional collection of assemblies preloaded from the target CLR instance, or null if you don't have any
            </param>
            <param name="reader">
            The optional <see cref="T:CilTools.Runtime.ClrAssemblyReader"/> object to be used for reading assemblies from the target CLR isntance, 
            or null if you don't have one
            </param>
            <returns>
            The array of <see cref="T:CilTools.Runtime.ClrThreadInfo"/> objects containing information about managed threads
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The value of <paramref name="runtime"/> parameter is null 
            </exception>
        </member>
        <member name="P:CilTools.Runtime.ClrThreadInfo.StackTrace">
            <summary>
            Gets the stack trace of the current thread
            </summary>
            <remarks>
            The stack trace is the sequence of the nested method calls made in the thread before it reached the current point 
            of execution.
            </remarks>
        </member>
        <member name="P:CilTools.Runtime.ClrThreadInfo.DisplayString">
            <summary>
            Gets the information about the current thread
            </summary>
        </member>
        <member name="M:CilTools.Runtime.ClrThreadInfo.Print(System.IO.TextWriter)">
            <summary>
            Prints the information about the current thread to the specified TextWriter
            </summary>
            <exception cref="T:System.ArgumentNullException">
            The value of <paramref name="output"/> parameter is null 
            </exception>
        </member>
        <member name="M:CilTools.Runtime.ClrThreadInfo.ToString">
            <summary>
            Gets the information about the current thread
            </summary>
        </member>
        <member name="T:CilTools.Runtime.DynamicMethodsAssembly">
            <summary>
            Represents the pseudo-assembly that contains a collection of dynamic methods in the external process
            </summary>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.#ctor(Microsoft.Diagnostics.Runtime.DataTarget,System.Boolean)">
            <summary>
            Creates new <c>DynamicMethodsAssembly</c> object for the specified data target, optionally indicating whether the created object 
            owns the data target.
            </summary>
            <param name="dt">ClrMD data target to read information from</param>
            <param name="autoDispose">
            <c>true</c> if this instance owns tha data target and should dispose it automatically when it is no longer needed
            </param>
            <exception cref="T:System.ArgumentNullException">Supplied data target is null</exception>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.#ctor(Microsoft.Diagnostics.Runtime.DataTarget,CilTools.Runtime.ClrAssemblyReader,System.Boolean)">
            <summary>
            Creates new <c>DynamicMethodsAssembly</c> object for the specified data target, optionally 
            providing the <see cref="T:CilTools.Runtime.ClrAssemblyReader"/> instance and indicating whether the created object 
            owns the data target.
            </summary>
            <param name="dt">ClrMD data target to read information from</param>
            <param name="r">
            Assembly reader object to read dependent assemblies.
            </param>
            <param name="autoDispose">
            <c>true</c> if this instance owns tha data target and should dispose it automatically when it is no longer needed
            </param>
            <remarks>
            If the supplied <see cref="T:CilTools.Runtime.ClrAssemblyReader"/> is null, the constructor will create new 
            assembly reader instance using the supplied data target. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">Supplied data target is null</exception>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.ChildType">
            <summary>
            Gets pseudo-type that contains the collection of dynamic methods
            </summary>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.Target">
            <summary>
            ClrMD data target associated with this instance
            </summary>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.AssemblyReader">
            <summary>
            Gets the assembly reader object used to read dependent assemblies
            </summary>
            <remarks>
            When dynamic method references a member from the external assembly, the library will 
            use this assembly reader object when resolving metadata tokens from the external assembly. 
            The assembly reader acts as cache that stores assembly instance so we don't need to load 
            them multiple times.
            </remarks>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.FullName">
            <summary>
            Gets the display name of the assembly
            </summary>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetName">
            <summary>
            Gets an AssemblyName for this assembly
            </summary>
            <returns>An object that contains the fully parsed display name for this assembly</returns>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.Location">
            <summary>
            Gets the full path to the assembly. This implementation always returns an empty string.
            </summary>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.CodeBase">
            <summary>
            Gets the full path to the assembly. This implementation always returns an empty string.
            </summary>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.IsDynamic">
            <summary>
            Gets a value that indicates whether the current assembly was generated dynamically at runtime.
            </summary>
            <remarks>This implementation always returns <c>true</c></remarks>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.ReflectionOnly">
            <summary>
            Gets a boolean value indicating whether this assembly was loaded into the reflection-only context.
            </summary>
            <value>This implementation always returns <c>true</c></value>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.EnumerateMethods">
            <summary>
            Gets the collection of all methods defined in this assembly
            </summary>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetTypes">
            <summary>
            Gets the types defined in this assembly. 
            </summary>
            <returns>An array that contains all the types that are defined in this assembly.</returns>
            <remarks>This implementation returns collection that consists of the single pseudo-type representing dynamic methods</remarks>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetType(System.String)">
            <summary>
            Gets the <c>Type</c> object that represents the specified type.
            </summary>
            <param name="name">The full name of the type.</param>
            <returns>An object that represents the specified type, or <c>null</c> if the type is not found.</returns>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetType(System.String,System.Boolean)">
            <summary>
            Gets the <c>Type</c> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.
            </summary>
            <param name="name">The full name of the type.</param>
            <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
            <returns>An object that represents the specified type.</returns>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the <c>Type</c> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.
            </summary>
            <param name="name">The full name of the type.</param>
            <param name="throwOnError">true to throw an exception if the type is not found; false to return null.</param>
            <param name="ignoreCase">true to ignore the case of the type name; otherwise, false.</param>
            <returns>An object that represents the specified type.</returns>
        </member>
        <member name="P:CilTools.Runtime.DynamicMethodsAssembly.ExportedTypes">
            <summary>
            Gets a collection of the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <remarks>This implementation returns an empty collection</remarks>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.GetExportedTypes">
            <summary>
            Gets the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <returns>An array that represents the types defined in this assembly that are visible outside the assembly.</returns>
            /// <remarks>This implementation returns an empty array</remarks>
        </member>
        <member name="M:CilTools.Runtime.DynamicMethodsAssembly.Dispose">
            <summary>
            Releases unmagnaged resources associated with this assembly object
            </summary>
            <remarks>This method only disposes the underlying data target if this instance was constructed with the <c>autoDispose</c> 
            parameter set to true. </remarks>
        </member>
    </members>
</doc>
