### YamlMime:ManagedReference
items:
- uid: CilTools.Syntax.Tokens.SyntaxReader
  commentId: T:CilTools.Syntax.Tokens.SyntaxReader
  id: SyntaxReader
  parent: CilTools.Syntax.Tokens
  children:
  - CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String)
  - CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String,System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition},CilTools.Syntax.SyntaxFactory)
  langs:
  - csharp
  - vb
  name: SyntaxReader
  nameWithType: SyntaxReader
  fullName: CilTools.Syntax.Tokens.SyntaxReader
  type: Class
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax.Tokens
  summary: "\nReads tokens from a string and transforms them into corresponding <xref href=\"CilTools.Syntax.SyntaxNode\" data-throw-if-not-resolved=\"false\"></xref> instances\n"
  syntax:
    content: public static class SyntaxReader
    content.vb: Public Module SyntaxReader
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String,System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition},CilTools.Syntax.SyntaxFactory)
  commentId: M:CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String,System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition},CilTools.Syntax.SyntaxFactory)
  id: ReadAllNodes(System.String,System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition},CilTools.Syntax.SyntaxFactory)
  parent: CilTools.Syntax.Tokens.SyntaxReader
  langs:
  - csharp
  - vb
  name: ReadAllNodes(String, IEnumerable<SyntaxTokenDefinition>, SyntaxFactory)
  nameWithType: SyntaxReader.ReadAllNodes(String, IEnumerable<SyntaxTokenDefinition>, SyntaxFactory)
  fullName: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String, System.Collections.Generic.IEnumerable<CilTools.Syntax.Tokens.SyntaxTokenDefinition>, CilTools.Syntax.SyntaxFactory)
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax.Tokens
  summary: "\nReads all tokens from the specified string using the specified collection of token definitions and syntax factory\n"
  syntax:
    content: public static SyntaxNode[] ReadAllNodes(string src, IEnumerable<SyntaxTokenDefinition> tokenDefinitions, SyntaxFactory factory)
    parameters:
    - id: src
      type: System.String
      description: Input string
    - id: tokenDefinitions
      type: System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition}
      description: "\nCollection of token definitions that will be used to split the input string into a sequence of tokens\n"
    - id: factory
      type: CilTools.Syntax.SyntaxFactory
      description: "\nSyntax factory object that will be used to create new <xref href=\"CilTools.Syntax.SyntaxNode\" data-throw-if-not-resolved=\"false\"></xref> instances\n"
    return:
      type: CilTools.Syntax.SyntaxNode[]
      description: Array of syntax nodes that contain tokens
    content.vb: Public Shared Function ReadAllNodes(src As String, tokenDefinitions As IEnumerable(Of SyntaxTokenDefinition), factory As SyntaxFactory) As SyntaxNode()
  overload: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes*
  nameWithType.vb: SyntaxReader.ReadAllNodes(String, IEnumerable(Of SyntaxTokenDefinition), SyntaxFactory)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String, System.Collections.Generic.IEnumerable(Of CilTools.Syntax.Tokens.SyntaxTokenDefinition), CilTools.Syntax.SyntaxFactory)
  name.vb: ReadAllNodes(String, IEnumerable(Of SyntaxTokenDefinition), SyntaxFactory)
- uid: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String)
  commentId: M:CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String)
  id: ReadAllNodes(System.String)
  parent: CilTools.Syntax.Tokens.SyntaxReader
  langs:
  - csharp
  - vb
  name: ReadAllNodes(String)
  nameWithType: SyntaxReader.ReadAllNodes(String)
  fullName: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes(System.String)
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax.Tokens
  summary: "\nReads all CIL assembler tokens from the specified string\n"
  syntax:
    content: public static SyntaxNode[] ReadAllNodes(string src)
    parameters:
    - id: src
      type: System.String
      description: Input string
    return:
      type: CilTools.Syntax.SyntaxNode[]
      description: Array of syntax nodes that contain tokens
    content.vb: Public Shared Function ReadAllNodes(src As String) As SyntaxNode()
  overload: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CilTools.Syntax.Tokens
  commentId: N:CilTools.Syntax.Tokens
  isExternal: true
  name: CilTools.Syntax.Tokens
  nameWithType: CilTools.Syntax.Tokens
  fullName: CilTools.Syntax.Tokens
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes*
  commentId: Overload:CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes
  isExternal: true
  name: ReadAllNodes
  nameWithType: SyntaxReader.ReadAllNodes
  fullName: CilTools.Syntax.Tokens.SyntaxReader.ReadAllNodes
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition}
  commentId: T:System.Collections.Generic.IEnumerable{CilTools.Syntax.Tokens.SyntaxTokenDefinition}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SyntaxTokenDefinition>
  nameWithType: IEnumerable<SyntaxTokenDefinition>
  fullName: System.Collections.Generic.IEnumerable<CilTools.Syntax.Tokens.SyntaxTokenDefinition>
  nameWithType.vb: IEnumerable(Of SyntaxTokenDefinition)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CilTools.Syntax.Tokens.SyntaxTokenDefinition)
  name.vb: IEnumerable(Of SyntaxTokenDefinition)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilTools.Syntax.Tokens.SyntaxTokenDefinition
    name: SyntaxTokenDefinition
    nameWithType: SyntaxTokenDefinition
    fullName: CilTools.Syntax.Tokens.SyntaxTokenDefinition
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilTools.Syntax.Tokens.SyntaxTokenDefinition
    name: SyntaxTokenDefinition
    nameWithType: SyntaxTokenDefinition
    fullName: CilTools.Syntax.Tokens.SyntaxTokenDefinition
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CilTools.Syntax.SyntaxFactory
  commentId: T:CilTools.Syntax.SyntaxFactory
  parent: CilTools.Syntax
  isExternal: true
  name: SyntaxFactory
  nameWithType: SyntaxFactory
  fullName: CilTools.Syntax.SyntaxFactory
- uid: CilTools.Syntax.SyntaxNode[]
  isExternal: true
  name: SyntaxNode[]
  nameWithType: SyntaxNode[]
  fullName: CilTools.Syntax.SyntaxNode[]
  nameWithType.vb: SyntaxNode()
  fullName.vb: CilTools.Syntax.SyntaxNode()
  name.vb: SyntaxNode()
  spec.csharp:
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CilTools.Syntax
  commentId: N:CilTools.Syntax
  isExternal: true
  name: CilTools.Syntax
  nameWithType: CilTools.Syntax
  fullName: CilTools.Syntax
