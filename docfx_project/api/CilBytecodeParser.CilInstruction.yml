### YamlMime:ManagedReference
items:
- uid: CilBytecodeParser.CilInstruction
  commentId: T:CilBytecodeParser.CilInstruction
  id: CilInstruction
  parent: CilBytecodeParser
  children:
  - CilBytecodeParser.CilInstruction.#ctor(System.Reflection.Emit.OpCode,System.Object,System.UInt32,System.UInt32,System.UInt32,System.Reflection.MethodBase)
  - CilBytecodeParser.CilInstruction._ByteOffset
  - CilBytecodeParser.CilInstruction._Method
  - CilBytecodeParser.CilInstruction._OpCode
  - CilBytecodeParser.CilInstruction._Operand
  - CilBytecodeParser.CilInstruction._OperandSize
  - CilBytecodeParser.CilInstruction._OrdinalNumber
  - CilBytecodeParser.CilInstruction.ByteOffset
  - CilBytecodeParser.CilInstruction.Code
  - CilBytecodeParser.CilInstruction.CreateEmptyInstruction(System.Reflection.MethodBase)
  - CilBytecodeParser.CilInstruction.EmitTo(System.Reflection.Emit.ILGenerator)
  - CilBytecodeParser.CilInstruction.Error
  - CilBytecodeParser.CilInstruction.Method
  - CilBytecodeParser.CilInstruction.Name
  - CilBytecodeParser.CilInstruction.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  - CilBytecodeParser.CilInstruction.OpCode
  - CilBytecodeParser.CilInstruction.Operand
  - CilBytecodeParser.CilInstruction.OperandSize
  - CilBytecodeParser.CilInstruction.OperandType
  - CilBytecodeParser.CilInstruction.OrdinalNumber
  - CilBytecodeParser.CilInstruction.Parse(System.String)
  - CilBytecodeParser.CilInstruction.ReferencedMember
  - CilBytecodeParser.CilInstruction.ReferencedString
  - CilBytecodeParser.CilInstruction.ReferencedType
  - CilBytecodeParser.CilInstruction.ToString
  - CilBytecodeParser.CilInstruction.TotalSize
  langs:
  - csharp
  - vb
  name: CilInstruction
  nameWithType: CilInstruction
  fullName: CilBytecodeParser.CilInstruction
  type: Class
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRepresents CIL instruction, a main structural element of the method body which consists of operation code and operand.\n"
  remarks: To retreive a collection of CIL instructions for the specified method, use methods of <xref href="CilBytecodeParser.CilReader" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public class CilInstruction
    content.vb: Public Class CilInstruction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CilBytecodeParser.CilInstruction._Method
  commentId: F:CilBytecodeParser.CilInstruction._Method
  id: _Method
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _Method
  nameWithType: CilInstruction._Method
  fullName: CilBytecodeParser.CilInstruction._Method
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nA reference to a method which this instruction belongs to\n"
  syntax:
    content: protected MethodBase _Method
    return:
      type: System.Reflection.MethodBase
    content.vb: Protected _Method As MethodBase
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction._OpCode
  commentId: F:CilBytecodeParser.CilInstruction._OpCode
  id: _OpCode
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _OpCode
  nameWithType: CilInstruction._OpCode
  fullName: CilBytecodeParser.CilInstruction._OpCode
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nOpcode of this instruction\n"
  syntax:
    content: protected OpCode _OpCode
    return:
      type: System.Reflection.Emit.OpCode
    content.vb: Protected _OpCode As OpCode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction._Operand
  commentId: F:CilBytecodeParser.CilInstruction._Operand
  id: _Operand
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _Operand
  nameWithType: CilInstruction._Operand
  fullName: CilBytecodeParser.CilInstruction._Operand
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nOperand object of this instruction, if applicable\n"
  syntax:
    content: protected object _Operand
    return:
      type: System.Object
    content.vb: Protected _Operand As Object
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction._OperandSize
  commentId: F:CilBytecodeParser.CilInstruction._OperandSize
  id: _OperandSize
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _OperandSize
  nameWithType: CilInstruction._OperandSize
  fullName: CilBytecodeParser.CilInstruction._OperandSize
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nSize, in bytes, of this instruction&apos;s operand\n"
  syntax:
    content: protected uint _OperandSize
    return:
      type: System.UInt32
    content.vb: Protected _OperandSize As UInteger
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction._ByteOffset
  commentId: F:CilBytecodeParser.CilInstruction._ByteOffset
  id: _ByteOffset
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _ByteOffset
  nameWithType: CilInstruction._ByteOffset
  fullName: CilBytecodeParser.CilInstruction._ByteOffset
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nByte offset of this instruction from the beginning of the method body\n"
  syntax:
    content: protected uint _ByteOffset
    return:
      type: System.UInt32
    content.vb: Protected _ByteOffset As UInteger
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction._OrdinalNumber
  commentId: F:CilBytecodeParser.CilInstruction._OrdinalNumber
  id: _OrdinalNumber
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: _OrdinalNumber
  nameWithType: CilInstruction._OrdinalNumber
  fullName: CilBytecodeParser.CilInstruction._OrdinalNumber
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nOrdinal number of the place this instruction takes in method body, starting from one.\n"
  syntax:
    content: protected uint _OrdinalNumber
    return:
      type: System.UInt32
    content.vb: Protected _OrdinalNumber As UInteger
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilInstruction.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  commentId: M:CilBytecodeParser.CilInstruction.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  id: OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: OnError(Object, CilErrorEventArgs)
  nameWithType: CilInstruction.OnError(Object, CilErrorEventArgs)
  fullName: CilBytecodeParser.CilInstruction.OnError(System.Object, CilBytecodeParser.CilErrorEventArgs)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRaises a &apos;Error&apos; event\n"
  syntax:
    content: protected static void OnError(object sender, CilErrorEventArgs e)
    parameters:
    - id: sender
      type: System.Object
      description: Object that caused this event
    - id: e
      type: CilBytecodeParser.CilErrorEventArgs
      description: Event arguments
    content.vb: Protected Shared Sub OnError(sender As Object, e As CilErrorEventArgs)
  overload: CilBytecodeParser.CilInstruction.OnError*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: CilBytecodeParser.CilInstruction.#ctor(System.Reflection.Emit.OpCode,System.Object,System.UInt32,System.UInt32,System.UInt32,System.Reflection.MethodBase)
  commentId: M:CilBytecodeParser.CilInstruction.#ctor(System.Reflection.Emit.OpCode,System.Object,System.UInt32,System.UInt32,System.UInt32,System.Reflection.MethodBase)
  id: '#ctor(System.Reflection.Emit.OpCode,System.Object,System.UInt32,System.UInt32,System.UInt32,System.Reflection.MethodBase)'
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: CilInstruction(OpCode, Object, UInt32, UInt32, UInt32, MethodBase)
  nameWithType: CilInstruction.CilInstruction(OpCode, Object, UInt32, UInt32, UInt32, MethodBase)
  fullName: CilBytecodeParser.CilInstruction.CilInstruction(System.Reflection.Emit.OpCode, System.Object, System.UInt32, System.UInt32, System.UInt32, System.Reflection.MethodBase)
  type: Constructor
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nCreates a new CilInstruction object initialized with specified field values (infrastructure)\n"
  remarks: Do not use this constructor directly. To retreive a collection of CIL instructions for the specified method, use methods of <xref href="CilBytecodeParser.CilReader" data-throw-if-not-resolved="false"></xref> class instead.
  syntax:
    content: public CilInstruction(OpCode opc, object operand = null, uint opsize = 0U, uint byteoffset = 0U, uint ordinalnum = 0U, MethodBase mb = null)
    parameters:
    - id: opc
      type: System.Reflection.Emit.OpCode
      description: Opcode
    - id: operand
      type: System.Object
      description: Operand object
    - id: opsize
      type: System.UInt32
      description: Operand size
    - id: byteoffset
      type: System.UInt32
      description: Byte offset
    - id: ordinalnum
      type: System.UInt32
      description: Ordinal number
    - id: mb
      type: System.Reflection.MethodBase
      description: Owning method
    content.vb: Public Sub New(opc As OpCode, operand As Object = Nothing, opsize As UInteger = 0UI, byteoffset As UInteger = 0UI, ordinalnum As UInteger = 0UI, mb As MethodBase = Nothing)
  overload: CilBytecodeParser.CilInstruction.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.CilInstruction.CreateEmptyInstruction(System.Reflection.MethodBase)
  commentId: M:CilBytecodeParser.CilInstruction.CreateEmptyInstruction(System.Reflection.MethodBase)
  id: CreateEmptyInstruction(System.Reflection.MethodBase)
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: CreateEmptyInstruction(MethodBase)
  nameWithType: CilInstruction.CreateEmptyInstruction(MethodBase)
  fullName: CilBytecodeParser.CilInstruction.CreateEmptyInstruction(System.Reflection.MethodBase)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nCreates new CilInstruction object that represents an empty instruction\n"
  syntax:
    content: public static CilInstruction CreateEmptyInstruction(MethodBase mb)
    parameters:
    - id: mb
      type: System.Reflection.MethodBase
      description: Owning method
    return:
      type: CilBytecodeParser.CilInstruction
      description: Empty CilInstruction object
    content.vb: Public Shared Function CreateEmptyInstruction(mb As MethodBase) As CilInstruction
  overload: CilBytecodeParser.CilInstruction.CreateEmptyInstruction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CilBytecodeParser.CilInstruction.ToString
  commentId: M:CilBytecodeParser.CilInstruction.ToString
  id: ToString
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CilInstruction.ToString()
  fullName: CilBytecodeParser.CilInstruction.ToString()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nReturns a text representation of this instruction as a line of CIL code\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: String containing text representation of this instruction
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: CilBytecodeParser.CilInstruction.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CilBytecodeParser.CilInstruction.EmitTo(System.Reflection.Emit.ILGenerator)
  commentId: M:CilBytecodeParser.CilInstruction.EmitTo(System.Reflection.Emit.ILGenerator)
  id: EmitTo(System.Reflection.Emit.ILGenerator)
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: EmitTo(ILGenerator)
  nameWithType: CilInstruction.EmitTo(ILGenerator)
  fullName: CilBytecodeParser.CilInstruction.EmitTo(System.Reflection.Emit.ILGenerator)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEmits CIL code for this instruction into the specified IL generator.\n"
  syntax:
    content: public void EmitTo(ILGenerator ilg)
    parameters:
    - id: ilg
      type: System.Reflection.Emit.ILGenerator
      description: Target IL generator.
    content.vb: Public Sub EmitTo(ilg As ILGenerator)
  overload: CilBytecodeParser.CilInstruction.EmitTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.CilInstruction.Parse(System.String)
  commentId: M:CilBytecodeParser.CilInstruction.Parse(System.String)
  id: Parse(System.String)
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: CilInstruction.Parse(String)
  fullName: CilBytecodeParser.CilInstruction.Parse(System.String)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nConverts CIL instruction textual representation into the corresponding CilInstruction object\n"
  syntax:
    content: public static CilInstruction Parse(string str)
    parameters:
    - id: str
      type: System.String
      description: The line of CIL code representing instruction
    return:
      type: CilBytecodeParser.CilInstruction
      description: CilInstruction object for the specified string
    content.vb: Public Shared Function Parse(str As String) As CilInstruction
  overload: CilBytecodeParser.CilInstruction.Parse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CilBytecodeParser.CilInstruction.Method
  commentId: P:CilBytecodeParser.CilInstruction.Method
  id: Method
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: CilInstruction.Method
  fullName: CilBytecodeParser.CilInstruction.Method
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a reference to a method which this instruction belongs to\n"
  syntax:
    content: public MethodBase Method { get; }
    parameters: []
    return:
      type: System.Reflection.MethodBase
    content.vb: Public ReadOnly Property Method As MethodBase
  overload: CilBytecodeParser.CilInstruction.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.OpCode
  commentId: P:CilBytecodeParser.CilInstruction.OpCode
  id: OpCode
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: OpCode
  nameWithType: CilInstruction.OpCode
  fullName: CilBytecodeParser.CilInstruction.OpCode
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the operation code (opcode) of this instruction\n"
  syntax:
    content: public OpCode OpCode { get; }
    parameters: []
    return:
      type: System.Reflection.Emit.OpCode
    content.vb: Public ReadOnly Property OpCode As OpCode
  overload: CilBytecodeParser.CilInstruction.OpCode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.Operand
  commentId: P:CilBytecodeParser.CilInstruction.Operand
  id: Operand
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Operand
  nameWithType: CilInstruction.Operand
  fullName: CilBytecodeParser.CilInstruction.Operand
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the operand object of this instruction\n"
  syntax:
    content: public object Operand { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Operand As Object
  overload: CilBytecodeParser.CilInstruction.Operand*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.OperandSize
  commentId: P:CilBytecodeParser.CilInstruction.OperandSize
  id: OperandSize
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: OperandSize
  nameWithType: CilInstruction.OperandSize
  fullName: CilBytecodeParser.CilInstruction.OperandSize
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets the size, in bytes, of this instruction&apos;s operand\n"
  syntax:
    content: public uint OperandSize { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property OperandSize As UInteger
  overload: CilBytecodeParser.CilInstruction.OperandSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.ByteOffset
  commentId: P:CilBytecodeParser.CilInstruction.ByteOffset
  id: ByteOffset
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: ByteOffset
  nameWithType: CilInstruction.ByteOffset
  fullName: CilBytecodeParser.CilInstruction.ByteOffset
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a byte offset of this instruction from the beginning of the method body\n"
  syntax:
    content: public uint ByteOffset { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property ByteOffset As UInteger
  overload: CilBytecodeParser.CilInstruction.ByteOffset*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.OrdinalNumber
  commentId: P:CilBytecodeParser.CilInstruction.OrdinalNumber
  id: OrdinalNumber
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: OrdinalNumber
  nameWithType: CilInstruction.OrdinalNumber
  fullName: CilBytecodeParser.CilInstruction.OrdinalNumber
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets ordinal number of the place this instruction takes in method body, starting from one.\n"
  syntax:
    content: public uint OrdinalNumber { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property OrdinalNumber As UInteger
  overload: CilBytecodeParser.CilInstruction.OrdinalNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.Code
  commentId: P:CilBytecodeParser.CilInstruction.Code
  id: Code
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Code
  nameWithType: CilInstruction.Code
  fullName: CilBytecodeParser.CilInstruction.Code
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets opcode of this instruction as a numerical value\n"
  syntax:
    content: public short Code { get; }
    parameters: []
    return:
      type: System.Int16
    content.vb: Public ReadOnly Property Code As Short
  overload: CilBytecodeParser.CilInstruction.Code*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.Name
  commentId: P:CilBytecodeParser.CilInstruction.Name
  id: Name
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CilInstruction.Name
  fullName: CilBytecodeParser.CilInstruction.Name
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a name of this instruction\n"
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: CilBytecodeParser.CilInstruction.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.TotalSize
  commentId: P:CilBytecodeParser.CilInstruction.TotalSize
  id: TotalSize
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: TotalSize
  nameWithType: CilInstruction.TotalSize
  fullName: CilBytecodeParser.CilInstruction.TotalSize
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets total size, in bytes, that this instruction occupies in the method body\n"
  syntax:
    content: public uint TotalSize { get; }
    parameters: []
    return:
      type: System.UInt32
    content.vb: Public ReadOnly Property TotalSize As UInteger
  overload: CilBytecodeParser.CilInstruction.TotalSize*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.OperandType
  commentId: P:CilBytecodeParser.CilInstruction.OperandType
  id: OperandType
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: OperandType
  nameWithType: CilInstruction.OperandType
  fullName: CilBytecodeParser.CilInstruction.OperandType
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets this instruction&apos;s operand type, or null if there&apos;s no operand\n"
  syntax:
    content: public Type OperandType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property OperandType As Type
  overload: CilBytecodeParser.CilInstruction.OperandType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.ReferencedMember
  commentId: P:CilBytecodeParser.CilInstruction.ReferencedMember
  id: ReferencedMember
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: ReferencedMember
  nameWithType: CilInstruction.ReferencedMember
  fullName: CilBytecodeParser.CilInstruction.ReferencedMember
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a member (type, field or method) referenced by this instruction, if applicable\n"
  syntax:
    content: public MemberInfo ReferencedMember { get; }
    parameters: []
    return:
      type: System.Reflection.MemberInfo
    content.vb: Public ReadOnly Property ReferencedMember As MemberInfo
  overload: CilBytecodeParser.CilInstruction.ReferencedMember*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.ReferencedType
  commentId: P:CilBytecodeParser.CilInstruction.ReferencedType
  id: ReferencedType
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: ReferencedType
  nameWithType: CilInstruction.ReferencedType
  fullName: CilBytecodeParser.CilInstruction.ReferencedType
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a type referenced by this instruction, if applicable\n"
  syntax:
    content: public Type ReferencedType { get; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public ReadOnly Property ReferencedType As Type
  overload: CilBytecodeParser.CilInstruction.ReferencedType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.ReferencedString
  commentId: P:CilBytecodeParser.CilInstruction.ReferencedString
  id: ReferencedString
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: ReferencedString
  nameWithType: CilInstruction.ReferencedString
  fullName: CilBytecodeParser.CilInstruction.ReferencedString
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a string literal referenced by this instruction, if applicable\n"
  syntax:
    content: public string ReferencedString { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ReferencedString As String
  overload: CilBytecodeParser.CilInstruction.ReferencedString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilInstruction.Error
  commentId: E:CilBytecodeParser.CilInstruction.Error
  id: Error
  parent: CilBytecodeParser.CilInstruction
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: CilInstruction.Error
  fullName: CilBytecodeParser.CilInstruction.Error
  type: Event
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRaised when error occurs in one of the methods in this class\n"
  syntax:
    content: public static event EventHandler<CilErrorEventArgs> Error
    return:
      type: System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
    content.vb: Public Shared Event Error As EventHandler(Of CilErrorEventArgs)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CilBytecodeParser
  commentId: N:CilBytecodeParser
  isExternal: true
  name: CilBytecodeParser
  nameWithType: CilBytecodeParser
  fullName: CilBytecodeParser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Emit.OpCode
  commentId: T:System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: true
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: true
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: CilBytecodeParser.CilInstruction.OnError*
  commentId: Overload:CilBytecodeParser.CilInstruction.OnError
  isExternal: true
  name: OnError
  nameWithType: CilInstruction.OnError
  fullName: CilBytecodeParser.CilInstruction.OnError
- uid: CilBytecodeParser.CilErrorEventArgs
  commentId: T:CilBytecodeParser.CilErrorEventArgs
  parent: CilBytecodeParser
  isExternal: true
  name: CilErrorEventArgs
  nameWithType: CilErrorEventArgs
  fullName: CilBytecodeParser.CilErrorEventArgs
- uid: CilBytecodeParser.CilInstruction.#ctor*
  commentId: Overload:CilBytecodeParser.CilInstruction.#ctor
  isExternal: true
  name: CilInstruction
  nameWithType: CilInstruction.CilInstruction
  fullName: CilBytecodeParser.CilInstruction.CilInstruction
- uid: CilBytecodeParser.CilInstruction.CreateEmptyInstruction*
  commentId: Overload:CilBytecodeParser.CilInstruction.CreateEmptyInstruction
  isExternal: true
  name: CreateEmptyInstruction
  nameWithType: CilInstruction.CreateEmptyInstruction
  fullName: CilBytecodeParser.CilInstruction.CreateEmptyInstruction
- uid: CilBytecodeParser.CilInstruction
  commentId: T:CilBytecodeParser.CilInstruction
  parent: CilBytecodeParser
  isExternal: true
  name: CilInstruction
  nameWithType: CilInstruction
  fullName: CilBytecodeParser.CilInstruction
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CilBytecodeParser.CilInstruction.ToString*
  commentId: Overload:CilBytecodeParser.CilInstruction.ToString
  isExternal: true
  name: ToString
  nameWithType: CilInstruction.ToString
  fullName: CilBytecodeParser.CilInstruction.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CilBytecodeParser.CilInstruction.EmitTo*
  commentId: Overload:CilBytecodeParser.CilInstruction.EmitTo
  isExternal: true
  name: EmitTo
  nameWithType: CilInstruction.EmitTo
  fullName: CilBytecodeParser.CilInstruction.EmitTo
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: true
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: CilBytecodeParser.CilInstruction.Parse*
  commentId: Overload:CilBytecodeParser.CilInstruction.Parse
  isExternal: true
  name: Parse
  nameWithType: CilInstruction.Parse
  fullName: CilBytecodeParser.CilInstruction.Parse
- uid: CilBytecodeParser.CilInstruction.Method*
  commentId: Overload:CilBytecodeParser.CilInstruction.Method
  isExternal: true
  name: Method
  nameWithType: CilInstruction.Method
  fullName: CilBytecodeParser.CilInstruction.Method
- uid: CilBytecodeParser.CilInstruction.OpCode*
  commentId: Overload:CilBytecodeParser.CilInstruction.OpCode
  isExternal: true
  name: OpCode
  nameWithType: CilInstruction.OpCode
  fullName: CilBytecodeParser.CilInstruction.OpCode
- uid: CilBytecodeParser.CilInstruction.Operand*
  commentId: Overload:CilBytecodeParser.CilInstruction.Operand
  isExternal: true
  name: Operand
  nameWithType: CilInstruction.Operand
  fullName: CilBytecodeParser.CilInstruction.Operand
- uid: CilBytecodeParser.CilInstruction.OperandSize*
  commentId: Overload:CilBytecodeParser.CilInstruction.OperandSize
  isExternal: true
  name: OperandSize
  nameWithType: CilInstruction.OperandSize
  fullName: CilBytecodeParser.CilInstruction.OperandSize
- uid: CilBytecodeParser.CilInstruction.ByteOffset*
  commentId: Overload:CilBytecodeParser.CilInstruction.ByteOffset
  isExternal: true
  name: ByteOffset
  nameWithType: CilInstruction.ByteOffset
  fullName: CilBytecodeParser.CilInstruction.ByteOffset
- uid: CilBytecodeParser.CilInstruction.OrdinalNumber*
  commentId: Overload:CilBytecodeParser.CilInstruction.OrdinalNumber
  isExternal: true
  name: OrdinalNumber
  nameWithType: CilInstruction.OrdinalNumber
  fullName: CilBytecodeParser.CilInstruction.OrdinalNumber
- uid: CilBytecodeParser.CilInstruction.Code*
  commentId: Overload:CilBytecodeParser.CilInstruction.Code
  isExternal: true
  name: Code
  nameWithType: CilInstruction.Code
  fullName: CilBytecodeParser.CilInstruction.Code
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: CilBytecodeParser.CilInstruction.Name*
  commentId: Overload:CilBytecodeParser.CilInstruction.Name
  isExternal: true
  name: Name
  nameWithType: CilInstruction.Name
  fullName: CilBytecodeParser.CilInstruction.Name
- uid: CilBytecodeParser.CilInstruction.TotalSize*
  commentId: Overload:CilBytecodeParser.CilInstruction.TotalSize
  isExternal: true
  name: TotalSize
  nameWithType: CilInstruction.TotalSize
  fullName: CilBytecodeParser.CilInstruction.TotalSize
- uid: CilBytecodeParser.CilInstruction.OperandType*
  commentId: Overload:CilBytecodeParser.CilInstruction.OperandType
  isExternal: true
  name: OperandType
  nameWithType: CilInstruction.OperandType
  fullName: CilBytecodeParser.CilInstruction.OperandType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CilBytecodeParser.CilInstruction.ReferencedMember*
  commentId: Overload:CilBytecodeParser.CilInstruction.ReferencedMember
  isExternal: true
  name: ReferencedMember
  nameWithType: CilInstruction.ReferencedMember
  fullName: CilBytecodeParser.CilInstruction.ReferencedMember
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: CilBytecodeParser.CilInstruction.ReferencedType*
  commentId: Overload:CilBytecodeParser.CilInstruction.ReferencedType
  isExternal: true
  name: ReferencedType
  nameWithType: CilInstruction.ReferencedType
  fullName: CilBytecodeParser.CilInstruction.ReferencedType
- uid: CilBytecodeParser.CilInstruction.ReferencedString*
  commentId: Overload:CilBytecodeParser.CilInstruction.ReferencedString
  isExternal: true
  name: ReferencedString
  nameWithType: CilInstruction.ReferencedString
  fullName: CilBytecodeParser.CilInstruction.ReferencedString
- uid: System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
  commentId: T:System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<CilErrorEventArgs>
  nameWithType: EventHandler<CilErrorEventArgs>
  fullName: System.EventHandler<CilBytecodeParser.CilErrorEventArgs>
  nameWithType.vb: EventHandler(Of CilErrorEventArgs)
  fullName.vb: System.EventHandler(Of CilBytecodeParser.CilErrorEventArgs)
  name.vb: EventHandler(Of CilErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.CilErrorEventArgs
    name: CilErrorEventArgs
    nameWithType: CilErrorEventArgs
    fullName: CilBytecodeParser.CilErrorEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.CilErrorEventArgs
    name: CilErrorEventArgs
    nameWithType: CilErrorEventArgs
    fullName: CilBytecodeParser.CilErrorEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
