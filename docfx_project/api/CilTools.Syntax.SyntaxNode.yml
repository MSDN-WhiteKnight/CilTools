### YamlMime:ManagedReference
items:
- uid: CilTools.Syntax.SyntaxNode
  commentId: T:CilTools.Syntax.SyntaxNode
  id: SyntaxNode
  parent: CilTools.Syntax
  children:
  - CilTools.Syntax.SyntaxNode.#ctor
  - CilTools.Syntax.SyntaxNode.EnumerateChildNodes
  - CilTools.Syntax.SyntaxNode.GetChildNodes
  - CilTools.Syntax.SyntaxNode.GetTypeDefSyntax(System.Type)
  - CilTools.Syntax.SyntaxNode.LeadingWhitespace
  - CilTools.Syntax.SyntaxNode.Parent
  - CilTools.Syntax.SyntaxNode.ToString
  - CilTools.Syntax.SyntaxNode.ToText(System.IO.TextWriter)
  - CilTools.Syntax.SyntaxNode.TrailingWhitespace
  langs:
  - csharp
  - vb
  name: SyntaxNode
  nameWithType: SyntaxNode
  fullName: CilTools.Syntax.SyntaxNode
  type: Class
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nRepresents node in the syntax tree of Common Intermediate Language (CIL) assembler code. Classes that represent concrete language constructs derive from this class. \n"
  remarks: "\n<p>\nThe <code>SyntaxNode</code> class instance contains all information required to produce the source code of the corresponding language construct, including whitespaces. \nThe <xref href=\"CilTools.Syntax.SyntaxNode.EnumerateChildNodes\" data-throw-if-not-resolved=\"false\"></xref> method returns all child nodes of this node, or an empty collection if it is a leaf (terminal node). \nSome child nodes may be exposed via specific properties as well. \nThe text representation for non-terminal node is a string concetanation of all its child nodes&apos; text representations. \n</p>\n<p>Use <xref href=\"CilTools.BytecodeAnalysis.CilGraph.ToSyntaxTree\" data-throw-if-not-resolved=\"false\"></xref> method to get the syntax tree for the specified method.</p>\n"
  syntax:
    content: public abstract class SyntaxNode
    content.vb: Public MustInherit Class SyntaxNode
  inheritance:
  - System.Object
  derivedClasses:
  - CilTools.Syntax.BlockSyntax
  - CilTools.Syntax.CommentSyntax
  - CilTools.Syntax.DirectiveSyntax
  - CilTools.Syntax.IdentifierSyntax
  - CilTools.Syntax.InstructionSyntax
  - CilTools.Syntax.KeywordSyntax
  - CilTools.Syntax.LiteralSyntax
  - CilTools.Syntax.MemberRefSyntax
  - CilTools.Syntax.MethodDefSyntax
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: CilTools.Syntax.SyntaxNode.ToText(System.IO.TextWriter)
  commentId: M:CilTools.Syntax.SyntaxNode.ToText(System.IO.TextWriter)
  id: ToText(System.IO.TextWriter)
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: ToText(TextWriter)
  nameWithType: SyntaxNode.ToText(TextWriter)
  fullName: CilTools.Syntax.SyntaxNode.ToText(System.IO.TextWriter)
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nWrites text representation of this node into the specified TextWriter\n"
  syntax:
    content: public abstract void ToText(TextWriter target)
    parameters:
    - id: target
      type: System.IO.TextWriter
    content.vb: Public MustOverride Sub ToText(target As TextWriter)
  overload: CilTools.Syntax.SyntaxNode.ToText*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: CilTools.Syntax.SyntaxNode.EnumerateChildNodes
  commentId: M:CilTools.Syntax.SyntaxNode.EnumerateChildNodes
  id: EnumerateChildNodes
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: EnumerateChildNodes()
  nameWithType: SyntaxNode.EnumerateChildNodes()
  fullName: CilTools.Syntax.SyntaxNode.EnumerateChildNodes()
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nEnumerates child nodes of this node. For the leaf node, returns an empty collection.\n"
  syntax:
    content: public abstract IEnumerable<SyntaxNode> EnumerateChildNodes()
    return:
      type: System.Collections.Generic.IEnumerable{CilTools.Syntax.SyntaxNode}
      description: The collection of child syntax nodes
    content.vb: Public MustOverride Function EnumerateChildNodes As IEnumerable(Of SyntaxNode)
  overload: CilTools.Syntax.SyntaxNode.EnumerateChildNodes*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: CilTools.Syntax.SyntaxNode.ToString
  commentId: M:CilTools.Syntax.SyntaxNode.ToString
  id: ToString
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SyntaxNode.ToString()
  fullName: CilTools.Syntax.SyntaxNode.ToString()
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets the text representation of this node, including whitespace content\n"
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string containing CIL code of this syntax node
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: CilTools.Syntax.SyntaxNode.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CilTools.Syntax.SyntaxNode.GetChildNodes
  commentId: M:CilTools.Syntax.SyntaxNode.GetChildNodes
  id: GetChildNodes
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: GetChildNodes()
  nameWithType: SyntaxNode.GetChildNodes()
  fullName: CilTools.Syntax.SyntaxNode.GetChildNodes()
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets the array of this node&apos;s child nodes. For the leaf node, returns an empty array.\n"
  syntax:
    content: public SyntaxNode[] GetChildNodes()
    return:
      type: CilTools.Syntax.SyntaxNode[]
      description: The array of child syntax nodes
    content.vb: Public Function GetChildNodes As SyntaxNode()
  overload: CilTools.Syntax.SyntaxNode.GetChildNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilTools.Syntax.SyntaxNode.GetTypeDefSyntax(System.Type)
  commentId: M:CilTools.Syntax.SyntaxNode.GetTypeDefSyntax(System.Type)
  id: GetTypeDefSyntax(System.Type)
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: GetTypeDefSyntax(Type)
  nameWithType: SyntaxNode.GetTypeDefSyntax(Type)
  fullName: CilTools.Syntax.SyntaxNode.GetTypeDefSyntax(System.Type)
  type: Method
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets the CIL assembler syntax for the definition of the specified type \n"
  syntax:
    content: public static IEnumerable<SyntaxNode> GetTypeDefSyntax(Type t)
    parameters:
    - id: t
      type: System.Type
      description: Type to get definition syntax
    return:
      type: System.Collections.Generic.IEnumerable{CilTools.Syntax.SyntaxNode}
      description: The collection of syntax nodes that make up type definition syntax
    content.vb: Public Shared Function GetTypeDefSyntax(t As Type) As IEnumerable(Of SyntaxNode)
  overload: CilTools.Syntax.SyntaxNode.GetTypeDefSyntax*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CilTools.Syntax.SyntaxNode.#ctor
  commentId: M:CilTools.Syntax.SyntaxNode.#ctor
  id: '#ctor'
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: SyntaxNode()
  nameWithType: SyntaxNode.SyntaxNode()
  fullName: CilTools.Syntax.SyntaxNode.SyntaxNode()
  type: Constructor
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  syntax:
    content: protected SyntaxNode()
    content.vb: Protected Sub New
  overload: CilTools.Syntax.SyntaxNode.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilTools.Syntax.SyntaxNode.LeadingWhitespace
  commentId: P:CilTools.Syntax.SyntaxNode.LeadingWhitespace
  id: LeadingWhitespace
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: LeadingWhitespace
  nameWithType: SyntaxNode.LeadingWhitespace
  fullName: CilTools.Syntax.SyntaxNode.LeadingWhitespace
  type: Property
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets whitespace content at the beginning of this node&apos;s code\n"
  remarks: "\nBesides the whitespace character itself, the returned string may contain line feed or carriage return characters. For efficiency purposes, the whitespace \ncontent, both syntactically meaningful and indentation-only, is stored within one of the adjacent nodes, not in the separate node.\n"
  syntax:
    content: public string LeadingWhitespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property LeadingWhitespace As String
  overload: CilTools.Syntax.SyntaxNode.LeadingWhitespace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilTools.Syntax.SyntaxNode.TrailingWhitespace
  commentId: P:CilTools.Syntax.SyntaxNode.TrailingWhitespace
  id: TrailingWhitespace
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: TrailingWhitespace
  nameWithType: SyntaxNode.TrailingWhitespace
  fullName: CilTools.Syntax.SyntaxNode.TrailingWhitespace
  type: Property
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets whitespace content at the end of this node&apos;s code\n"
  remarks: "\nBesides the whitespace character itself, the returned string may contain line feed or carriage return characters. For efficiency purposes, the whitespace \ncontent, both syntactically meaningful and indentation-only, is stored within one of the adjacent nodes, not in the separate node.\n"
  syntax:
    content: public string TrailingWhitespace { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property TrailingWhitespace As String
  overload: CilTools.Syntax.SyntaxNode.TrailingWhitespace*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilTools.Syntax.SyntaxNode.Parent
  commentId: P:CilTools.Syntax.SyntaxNode.Parent
  id: Parent
  parent: CilTools.Syntax.SyntaxNode
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: SyntaxNode.Parent
  fullName: CilTools.Syntax.SyntaxNode.Parent
  type: Property
  source:
    path: CilTools.BytecodeAnalysis
    isExternal: true
  assemblies:
  - CilTools.BytecodeAnalysis
  namespace: CilTools.Syntax
  summary: "\nGets the parent node of this syntax node, or null if this node is root or not included in syntax tree.\n"
  syntax:
    content: public SyntaxNode Parent { get; }
    parameters: []
    return:
      type: CilTools.Syntax.SyntaxNode
    content.vb: Public ReadOnly Property Parent As SyntaxNode
  overload: CilTools.Syntax.SyntaxNode.Parent*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: CilTools.Syntax
  commentId: N:CilTools.Syntax
  isExternal: true
  name: CilTools.Syntax
  nameWithType: CilTools.Syntax
  fullName: CilTools.Syntax
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CilTools.Syntax.SyntaxNode.ToText*
  commentId: Overload:CilTools.Syntax.SyntaxNode.ToText
  isExternal: true
  name: ToText
  nameWithType: SyntaxNode.ToText
  fullName: CilTools.Syntax.SyntaxNode.ToText
- uid: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: CilTools.Syntax.SyntaxNode.EnumerateChildNodes*
  commentId: Overload:CilTools.Syntax.SyntaxNode.EnumerateChildNodes
  isExternal: true
  name: EnumerateChildNodes
  nameWithType: SyntaxNode.EnumerateChildNodes
  fullName: CilTools.Syntax.SyntaxNode.EnumerateChildNodes
- uid: System.Collections.Generic.IEnumerable{CilTools.Syntax.SyntaxNode}
  commentId: T:System.Collections.Generic.IEnumerable{CilTools.Syntax.SyntaxNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SyntaxNode>
  nameWithType: IEnumerable<SyntaxNode>
  fullName: System.Collections.Generic.IEnumerable<CilTools.Syntax.SyntaxNode>
  nameWithType.vb: IEnumerable(Of SyntaxNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CilTools.Syntax.SyntaxNode)
  name.vb: IEnumerable(Of SyntaxNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CilTools.Syntax.SyntaxNode.ToString*
  commentId: Overload:CilTools.Syntax.SyntaxNode.ToString
  isExternal: true
  name: ToString
  nameWithType: SyntaxNode.ToString
  fullName: CilTools.Syntax.SyntaxNode.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CilTools.Syntax.SyntaxNode.GetChildNodes*
  commentId: Overload:CilTools.Syntax.SyntaxNode.GetChildNodes
  isExternal: true
  name: GetChildNodes
  nameWithType: SyntaxNode.GetChildNodes
  fullName: CilTools.Syntax.SyntaxNode.GetChildNodes
- uid: CilTools.Syntax.SyntaxNode[]
  isExternal: true
  name: SyntaxNode[]
  nameWithType: SyntaxNode[]
  fullName: CilTools.Syntax.SyntaxNode[]
  nameWithType.vb: SyntaxNode()
  fullName.vb: CilTools.Syntax.SyntaxNode()
  name.vb: SyntaxNode()
  spec.csharp:
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: CilTools.Syntax.SyntaxNode
    name: SyntaxNode
    nameWithType: SyntaxNode
    fullName: CilTools.Syntax.SyntaxNode
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: CilTools.Syntax.SyntaxNode.GetTypeDefSyntax*
  commentId: Overload:CilTools.Syntax.SyntaxNode.GetTypeDefSyntax
  isExternal: true
  name: GetTypeDefSyntax
  nameWithType: SyntaxNode.GetTypeDefSyntax
  fullName: CilTools.Syntax.SyntaxNode.GetTypeDefSyntax
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: CilTools.Syntax.SyntaxNode.#ctor*
  commentId: Overload:CilTools.Syntax.SyntaxNode.#ctor
  isExternal: true
  name: SyntaxNode
  nameWithType: SyntaxNode.SyntaxNode
  fullName: CilTools.Syntax.SyntaxNode.SyntaxNode
- uid: CilTools.Syntax.SyntaxNode.LeadingWhitespace*
  commentId: Overload:CilTools.Syntax.SyntaxNode.LeadingWhitespace
  isExternal: true
  name: LeadingWhitespace
  nameWithType: SyntaxNode.LeadingWhitespace
  fullName: CilTools.Syntax.SyntaxNode.LeadingWhitespace
- uid: CilTools.Syntax.SyntaxNode.TrailingWhitespace*
  commentId: Overload:CilTools.Syntax.SyntaxNode.TrailingWhitespace
  isExternal: true
  name: TrailingWhitespace
  nameWithType: SyntaxNode.TrailingWhitespace
  fullName: CilTools.Syntax.SyntaxNode.TrailingWhitespace
- uid: CilTools.Syntax.SyntaxNode.Parent*
  commentId: Overload:CilTools.Syntax.SyntaxNode.Parent
  isExternal: true
  name: Parent
  nameWithType: SyntaxNode.Parent
  fullName: CilTools.Syntax.SyntaxNode.Parent
- uid: CilTools.Syntax.SyntaxNode
  commentId: T:CilTools.Syntax.SyntaxNode
  parent: CilTools.Syntax
  isExternal: true
  name: SyntaxNode
  nameWithType: SyntaxNode
  fullName: CilTools.Syntax.SyntaxNode
