### YamlMime:ManagedReference
items:
- uid: CilBytecodeParser.CilGraph
  commentId: T:CilBytecodeParser.CilGraph
  id: CilGraph
  parent: CilBytecodeParser
  children:
  - CilBytecodeParser.CilGraph.#ctor(CilBytecodeParser.CilGraphNode,System.Reflection.MethodBase)
  - CilBytecodeParser.CilGraph._Method
  - CilBytecodeParser.CilGraph._Root
  - CilBytecodeParser.CilGraph.EmitTo(System.Reflection.Emit.ILGenerator,System.Func{CilBytecodeParser.CilInstruction,System.Boolean})
  - CilBytecodeParser.CilGraph.Error
  - CilBytecodeParser.CilGraph.GetInstructions
  - CilBytecodeParser.CilGraph.GetNodes
  - CilBytecodeParser.CilGraph.Method
  - CilBytecodeParser.CilGraph.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  - CilBytecodeParser.CilGraph.Root
  - CilBytecodeParser.CilGraph.ToString
  langs:
  - csharp
  - vb
  name: CilGraph
  nameWithType: CilGraph
  fullName: CilBytecodeParser.CilGraph
  type: Class
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRepresents a CIL graph, a graph that reflects a flow of control between CIL instructions in the method\n"
  remarks: "\nCIL graph is a directed graph with nodes representing CIL instructions withing method body and edges representing how control flows between them when runtime executes method. The root of the graph is the first instruction of the method. Each node stores a reference to the next instruction (which is usually executed after it) and, if it&apos;s a jump instruction, a reference to the branch target (an instruction that would be executed if the condition for the jump is met). For convenience, each instruction serving as branch target is assigned a label, a string that identify it. The last instruction of the method has null as its next instruction reference.\n\nUse <xref href=\"CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)\" data-throw-if-not-resolved=\"false\"></xref> method to create CIL graph for a method.\n"
  syntax:
    content: public class CilGraph
    content.vb: Public Class CilGraph
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CilBytecodeParser.CilGraph._Root
  commentId: F:CilBytecodeParser.CilGraph._Root
  id: _Root
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: _Root
  nameWithType: CilGraph._Root
  fullName: CilBytecodeParser.CilGraph._Root
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nA root node of this graph (the first instruction in the method)\n"
  syntax:
    content: protected CilGraphNode _Root
    return:
      type: CilBytecodeParser.CilGraphNode
    content.vb: Protected _Root As CilGraphNode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilGraph._Method
  commentId: F:CilBytecodeParser.CilGraph._Method
  id: _Method
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: _Method
  nameWithType: CilGraph._Method
  fullName: CilBytecodeParser.CilGraph._Method
  type: Field
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nA method object for which this graph is built\n"
  syntax:
    content: protected MethodBase _Method
    return:
      type: System.Reflection.MethodBase
    content.vb: Protected _Method As MethodBase
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: CilBytecodeParser.CilGraph.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  commentId: M:CilBytecodeParser.CilGraph.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  id: OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: OnError(Object, CilErrorEventArgs)
  nameWithType: CilGraph.OnError(Object, CilErrorEventArgs)
  fullName: CilBytecodeParser.CilGraph.OnError(System.Object, CilBytecodeParser.CilErrorEventArgs)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRaises Error event\n"
  syntax:
    content: protected static void OnError(object sender, CilErrorEventArgs e)
    parameters:
    - id: sender
      type: System.Object
      description: object that generated event
    - id: e
      type: CilBytecodeParser.CilErrorEventArgs
      description: event arguments
    content.vb: Protected Shared Sub OnError(sender As Object, e As CilErrorEventArgs)
  overload: CilBytecodeParser.CilGraph.OnError*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: CilBytecodeParser.CilGraph.#ctor(CilBytecodeParser.CilGraphNode,System.Reflection.MethodBase)
  commentId: M:CilBytecodeParser.CilGraph.#ctor(CilBytecodeParser.CilGraphNode,System.Reflection.MethodBase)
  id: '#ctor(CilBytecodeParser.CilGraphNode,System.Reflection.MethodBase)'
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: CilGraph(CilGraphNode, MethodBase)
  nameWithType: CilGraph.CilGraph(CilGraphNode, MethodBase)
  fullName: CilBytecodeParser.CilGraph.CilGraph(CilBytecodeParser.CilGraphNode, System.Reflection.MethodBase)
  type: Constructor
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nCreates new CIL graph. (Insfrastructure; not intended for user code)\n"
  remarks: Use <xref href="CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)" data-throw-if-not-resolved="false"></xref> method to create CIL graph for a method instead of using this contructor.
  syntax:
    content: public CilGraph(CilGraphNode root, MethodBase mb)
    parameters:
    - id: root
      type: CilBytecodeParser.CilGraphNode
      description: Root node
    - id: mb
      type: System.Reflection.MethodBase
      description: Method associated with this graph object
    content.vb: Public Sub New(root As CilGraphNode, mb As MethodBase)
  overload: CilBytecodeParser.CilGraph.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.CilGraph.ToString
  commentId: M:CilBytecodeParser.CilGraph.ToString
  id: ToString
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CilGraph.ToString()
  fullName: CilBytecodeParser.CilGraph.ToString()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nReturns CIL code corresponding to this graph as a string\n"
  remarks: The CIL code returned by this API is intended mainly for reading, not compiling. It is not guaranteed to be a valid input for CIL assembler.
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string of CIL code
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: CilBytecodeParser.CilGraph.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CilBytecodeParser.CilGraph.GetNodes
  commentId: M:CilBytecodeParser.CilGraph.GetNodes
  id: GetNodes
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: GetNodes()
  nameWithType: CilGraph.GetNodes()
  fullName: CilBytecodeParser.CilGraph.GetNodes()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEnumerates nodes in this graph\n"
  syntax:
    content: public IEnumerable<CilGraphNode> GetNodes()
    return:
      type: System.Collections.Generic.IEnumerable{CilBytecodeParser.CilGraphNode}
      description: The collection of graph nodes
    content.vb: Public Function GetNodes As IEnumerable(Of CilGraphNode)
  overload: CilBytecodeParser.CilGraph.GetNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.CilGraph.GetInstructions
  commentId: M:CilBytecodeParser.CilGraph.GetInstructions
  id: GetInstructions
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: GetInstructions()
  nameWithType: CilGraph.GetInstructions()
  fullName: CilBytecodeParser.CilGraph.GetInstructions()
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEnumerates all instructions represented by this graph&apos;s nodes\n"
  syntax:
    content: public IEnumerable<CilInstruction> GetInstructions()
    return:
      type: System.Collections.Generic.IEnumerable{CilBytecodeParser.CilInstruction}
      description: The collection of instructions
    content.vb: Public Function GetInstructions As IEnumerable(Of CilInstruction)
  overload: CilBytecodeParser.CilGraph.GetInstructions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CilBytecodeParser.CilGraph.EmitTo(System.Reflection.Emit.ILGenerator,System.Func{CilBytecodeParser.CilInstruction,System.Boolean})
  commentId: M:CilBytecodeParser.CilGraph.EmitTo(System.Reflection.Emit.ILGenerator,System.Func{CilBytecodeParser.CilInstruction,System.Boolean})
  id: EmitTo(System.Reflection.Emit.ILGenerator,System.Func{CilBytecodeParser.CilInstruction,System.Boolean})
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: EmitTo(ILGenerator, Func<CilInstruction, Boolean>)
  nameWithType: CilGraph.EmitTo(ILGenerator, Func<CilInstruction, Boolean>)
  fullName: CilBytecodeParser.CilGraph.EmitTo(System.Reflection.Emit.ILGenerator, System.Func<CilBytecodeParser.CilInstruction, System.Boolean>)
  type: Method
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nEmits the entire content of this CIL graph into the specified IL generator, \noptionally calling user callback for each processed instruction.\n"
  remarks: "Passing user callback into this method enables you to filter instructions that you want to be emitted \ninto target IL generator. \nReturn <xref uid=\"langword_csharp_true\" name=\"true\" href=\"\"></xref> to skip emitting instruction, or <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref> to emit instruction."
  syntax:
    content: public void EmitTo(ILGenerator gen, Func<CilInstruction, bool> callback = null)
    parameters:
    - id: gen
      type: System.Reflection.Emit.ILGenerator
      description: 'Target IL generator. '
    - id: callback
      type: System.Func{CilBytecodeParser.CilInstruction,System.Boolean}
      description: User callback to be called for each processed instruction.
    content.vb: Public Sub EmitTo(gen As ILGenerator, callback As Func(Of CilInstruction, Boolean) = Nothing)
  overload: CilBytecodeParser.CilGraph.EmitTo*
  nameWithType.vb: CilGraph.EmitTo(ILGenerator, Func(Of CilInstruction, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CilBytecodeParser.CilGraph.EmitTo(System.Reflection.Emit.ILGenerator, System.Func(Of CilBytecodeParser.CilInstruction, System.Boolean))
  name.vb: EmitTo(ILGenerator, Func(Of CilInstruction, Boolean))
- uid: CilBytecodeParser.CilGraph.Root
  commentId: P:CilBytecodeParser.CilGraph.Root
  id: Root
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: Root
  nameWithType: CilGraph.Root
  fullName: CilBytecodeParser.CilGraph.Root
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a root node of this graph (the first instruction in the method)\n"
  syntax:
    content: public CilGraphNode Root { get; }
    parameters: []
    return:
      type: CilBytecodeParser.CilGraphNode
    content.vb: Public ReadOnly Property Root As CilGraphNode
  overload: CilBytecodeParser.CilGraph.Root*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilGraph.Method
  commentId: P:CilBytecodeParser.CilGraph.Method
  id: Method
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: CilGraph.Method
  fullName: CilBytecodeParser.CilGraph.Method
  type: Property
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nGets a method for which this graph is built\n"
  syntax:
    content: public MethodBase Method { get; }
    parameters: []
    return:
      type: System.Reflection.MethodBase
    content.vb: Public ReadOnly Property Method As MethodBase
  overload: CilBytecodeParser.CilGraph.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CilBytecodeParser.CilGraph.Error
  commentId: E:CilBytecodeParser.CilGraph.Error
  id: Error
  parent: CilBytecodeParser.CilGraph
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: CilGraph.Error
  fullName: CilBytecodeParser.CilGraph.Error
  type: Event
  source:
    path: CilBytecodeParser
    isExternal: true
  assemblies:
  - CilBytecodeParser
  namespace: CilBytecodeParser
  summary: "\nRaised when error occurs in one of the methods in this class\n"
  syntax:
    content: public static event EventHandler<CilErrorEventArgs> Error
    return:
      type: System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
    content.vb: Public Shared Event Error As EventHandler(Of CilErrorEventArgs)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CilBytecodeParser
  commentId: N:CilBytecodeParser
  isExternal: true
  name: CilBytecodeParser
  nameWithType: CilBytecodeParser
  fullName: CilBytecodeParser
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CilBytecodeParser.CilGraphNode
  commentId: T:CilBytecodeParser.CilGraphNode
  parent: CilBytecodeParser
  isExternal: true
  name: CilGraphNode
  nameWithType: CilGraphNode
  fullName: CilBytecodeParser.CilGraphNode
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: CilBytecodeParser.CilGraph.OnError*
  commentId: Overload:CilBytecodeParser.CilGraph.OnError
  isExternal: true
  name: OnError
  nameWithType: CilGraph.OnError
  fullName: CilBytecodeParser.CilGraph.OnError
- uid: CilBytecodeParser.CilErrorEventArgs
  commentId: T:CilBytecodeParser.CilErrorEventArgs
  parent: CilBytecodeParser
  isExternal: true
  name: CilErrorEventArgs
  nameWithType: CilErrorEventArgs
  fullName: CilBytecodeParser.CilErrorEventArgs
- uid: CilBytecodeParser.CilGraph.#ctor*
  commentId: Overload:CilBytecodeParser.CilGraph.#ctor
  isExternal: true
  name: CilGraph
  nameWithType: CilGraph.CilGraph
  fullName: CilBytecodeParser.CilGraph.CilGraph
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CilBytecodeParser.CilGraph.ToString*
  commentId: Overload:CilBytecodeParser.CilGraph.ToString
  isExternal: true
  name: ToString
  nameWithType: CilGraph.ToString
  fullName: CilBytecodeParser.CilGraph.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CilBytecodeParser.CilGraph.GetNodes*
  commentId: Overload:CilBytecodeParser.CilGraph.GetNodes
  isExternal: true
  name: GetNodes
  nameWithType: CilGraph.GetNodes
  fullName: CilBytecodeParser.CilGraph.GetNodes
- uid: System.Collections.Generic.IEnumerable{CilBytecodeParser.CilGraphNode}
  commentId: T:System.Collections.Generic.IEnumerable{CilBytecodeParser.CilGraphNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CilGraphNode>
  nameWithType: IEnumerable<CilGraphNode>
  fullName: System.Collections.Generic.IEnumerable<CilBytecodeParser.CilGraphNode>
  nameWithType.vb: IEnumerable(Of CilGraphNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CilBytecodeParser.CilGraphNode)
  name.vb: IEnumerable(Of CilGraphNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.CilGraphNode
    name: CilGraphNode
    nameWithType: CilGraphNode
    fullName: CilBytecodeParser.CilGraphNode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.CilGraphNode
    name: CilGraphNode
    nameWithType: CilGraphNode
    fullName: CilBytecodeParser.CilGraphNode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CilBytecodeParser.CilGraph.GetInstructions*
  commentId: Overload:CilBytecodeParser.CilGraph.GetInstructions
  isExternal: true
  name: GetInstructions
  nameWithType: CilGraph.GetInstructions
  fullName: CilBytecodeParser.CilGraph.GetInstructions
- uid: System.Collections.Generic.IEnumerable{CilBytecodeParser.CilInstruction}
  commentId: T:System.Collections.Generic.IEnumerable{CilBytecodeParser.CilInstruction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CilInstruction>
  nameWithType: IEnumerable<CilInstruction>
  fullName: System.Collections.Generic.IEnumerable<CilBytecodeParser.CilInstruction>
  nameWithType.vb: IEnumerable(Of CilInstruction)
  fullName.vb: System.Collections.Generic.IEnumerable(Of CilBytecodeParser.CilInstruction)
  name.vb: IEnumerable(Of CilInstruction)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.CilInstruction
    name: CilInstruction
    nameWithType: CilInstruction
    fullName: CilBytecodeParser.CilInstruction
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.CilInstruction
    name: CilInstruction
    nameWithType: CilInstruction
    fullName: CilBytecodeParser.CilInstruction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CilBytecodeParser.CilGraph.EmitTo*
  commentId: Overload:CilBytecodeParser.CilGraph.EmitTo
  isExternal: true
  name: EmitTo
  nameWithType: CilGraph.EmitTo
  fullName: CilBytecodeParser.CilGraph.EmitTo
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: true
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Func{CilBytecodeParser.CilInstruction,System.Boolean}
  commentId: '!:System.Func{CilBytecodeParser.CilInstruction,System.Boolean}'
  definition: System.Func`2
  name: Func<CilInstruction, Boolean>
  nameWithType: Func<CilInstruction, Boolean>
  fullName: System.Func<CilBytecodeParser.CilInstruction, System.Boolean>
  nameWithType.vb: Func(Of CilInstruction, Boolean)
  fullName.vb: System.Func(Of CilBytecodeParser.CilInstruction, System.Boolean)
  name.vb: Func(Of CilInstruction, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.CilInstruction
    name: CilInstruction
    nameWithType: CilInstruction
    fullName: CilBytecodeParser.CilInstruction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.CilInstruction
    name: CilInstruction
    nameWithType: CilInstruction
    fullName: CilBytecodeParser.CilInstruction
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: true
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: System.Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: CilBytecodeParser.CilGraph.Root*
  commentId: Overload:CilBytecodeParser.CilGraph.Root
  isExternal: true
  name: Root
  nameWithType: CilGraph.Root
  fullName: CilBytecodeParser.CilGraph.Root
- uid: CilBytecodeParser.CilGraph.Method*
  commentId: Overload:CilBytecodeParser.CilGraph.Method
  isExternal: true
  name: Method
  nameWithType: CilGraph.Method
  fullName: CilBytecodeParser.CilGraph.Method
- uid: System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
  commentId: T:System.EventHandler{CilBytecodeParser.CilErrorEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<CilErrorEventArgs>
  nameWithType: EventHandler<CilErrorEventArgs>
  fullName: System.EventHandler<CilBytecodeParser.CilErrorEventArgs>
  nameWithType.vb: EventHandler(Of CilErrorEventArgs)
  fullName.vb: System.EventHandler(Of CilBytecodeParser.CilErrorEventArgs)
  name.vb: EventHandler(Of CilErrorEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CilBytecodeParser.CilErrorEventArgs
    name: CilErrorEventArgs
    nameWithType: CilErrorEventArgs
    fullName: CilBytecodeParser.CilErrorEventArgs
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CilBytecodeParser.CilErrorEventArgs
    name: CilErrorEventArgs
    nameWithType: CilErrorEventArgs
    fullName: CilBytecodeParser.CilErrorEventArgs
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
