<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CilBytecodeParser.NetStandard</name>
    </assembly>
    <members>
        <member name="T:CilBytecodeParser.CilAnalysis">
            <summary>
            Provides static methods that assist in parsing and analysing CIL bytecode
            </summary>
        </member>
        <member name="E:CilBytecodeParser.CilAnalysis.Error">
            <summary>
            Raised when error occurs in one of the methods in this class
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetTypeName(System.Type)">
            <summary>
            Gets the name of .NET type in CIL notation
            </summary>
            <param name="t">Type for which name is requested</param>
            <exception cref="T:System.ArgumentNullException">t is null</exception>
            <remarks>Returns short type name, such as `int32`, if it exists. Otherwise returns full name.</remarks>
            <returns>Short of full type name</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetTypeFullName(System.Type)">
            <summary>
            Gets the full name of .NET type in CIL notation
            </summary>
            <param name="t">Type for which name is requested</param>
            <exception cref="T:System.ArgumentNullException">t is null</exception>
            <remarks>Returns fully qualified name, such as `class [mscorlib]System.String`</remarks>
            <returns>Full type name</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)">
            <summary>
            Returns <see cref="T:CilBytecodeParser.CilGraph"/> that represents a specified method
            </summary>
            <param name="m">Method for which to build CIL graph</param>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>
            <returns>CIL graph object</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.MethodToText(System.Reflection.MethodBase)">
            <summary>
            Returns specified method CIL code as string
            </summary>
            <param name="m">Method for which to retreive CIL</param>
            <remarks>The CIL code returned by this API is intended mainly for reading, not compiling. It is not guaranteed to be a valid input for CIL assembler.</remarks>
            <returns>CIL code string</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMethods(System.Reflection.MethodBase)">
            <summary>
            Gets all methods that are referenced by the specified method
            </summary>
            <param name="mb">Method for which to retreive referenced methods</param>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Reflection.MethodBase)">
            <summary>
            Gets all members (fields or methods) referenced by specified method
            </summary>
            <param name="mb">Method for which to retreive referenced members</param>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Reflection.MethodBase,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members (fields or methods) referenced by specified method that match specified criteria
            </summary>
            <param name="mb">Method for which to retreive referenced members</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMethods(System.Type)">
            <summary>
            Get all methods that are referenced by the code of the specified type
            </summary>
            <param name="t">Type for which to retreive referenced methods</param>
            <exception cref="T:System.ArgumentNullException">Source type is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Type)">
            <summary>
            Gets all members referenced by the code of specified type
            </summary>
            <param name="t">Type for which to retreive referenced memmbers</param>
            <exception cref="T:System.ArgumentNullException">Source type is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Type,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members referenced by the code of specified type that match specified criteria
            </summary>
            <param name="t">Type for which to retreive referenced memmbers</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <exception cref="T:System.ArgumentNullException">Source type is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMethods(System.Reflection.Assembly)">
            <summary>
            Get all methods that are referenced by the code in the specified assembly
            </summary>
            <param name="ass">Assembly for which to retreive referenced methods</param>
            <exception cref="T:System.ArgumentNullException">Source assembly is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Reflection.Assembly)">
            <summary>
            Gets all members referenced by the code of specified assembly
            </summary>
            <param name="ass">Assembly for which to retreive referenced members</param>
            <exception cref="T:System.ArgumentNullException">Source assembly is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.CilAnalysis.GetReferencedMembers(System.Reflection.Assembly,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members referenced by the code of specified assembly that match specified criteria
            </summary>
            <param name="ass">Assembly for which to retreive referenced members</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <exception cref="T:System.ArgumentNullException">Source assembly is null</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="T:CilBytecodeParser.MemberCriteria">
            <summary>
            Represents bitwise flags that define what kinds of members are requested 
            </summary>
            <remarks>External members are members defined in different assembly then the method which references them, not to be confused with `external` keyword in C#. Internal members are members defined in the same assembly as referencing method, similarly, not to be confused with `internal` keyword or `InternalCall` attribute.  If you specify a combination of flags that does not match anything (i.e., if you define neither external nor internal members, or neither methods nor fields) when requesting referenced members, empty collection is returned.</remarks>
        </member>
        <member name="F:CilBytecodeParser.MemberCriteria.External">
            <summary>
            Return external (not from the same assembly as containing method) members
            </summary>
        </member>
        <member name="F:CilBytecodeParser.MemberCriteria.Internal">
            <summary>
            Return internal (from the same assembly as containing method) members 
            </summary>
        </member>
        <member name="F:CilBytecodeParser.MemberCriteria.Methods">
            <summary>
            Return methods (including constructors)
            </summary>
        </member>
        <member name="F:CilBytecodeParser.MemberCriteria.Fields">
            <summary>
            Return fields
            </summary>
        </member>
        <member name="T:CilBytecodeParser.CilErrorEventArgs">
            <summary>
            Represents data associated with Error event
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilErrorEventArgs._Exception">
            <summary>
            Exception associated with this event
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilErrorEventArgs._Info">
            <summary>
            Additional information associated with this event
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilErrorEventArgs._Timestamp">
            <summary>
            A date and time when this event occured
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilErrorEventArgs.Exception">
            <summary>
            Gets exception associated with this event
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilErrorEventArgs.Info">
            <summary>
            Gets additional information associated with this event
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilErrorEventArgs.Timestamp">
            <summary>
            Gets date and time when this event occured
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilErrorEventArgs.#ctor(System.Exception,System.String)">
            <summary>
            Creates new CilErrorEventArgs object with specified Exception and error information
            </summary>
            <param name="ex">Exception associated with this event</param>
            <param name="info">Additional information associated with this event</param>
        </member>
        <member name="T:CilBytecodeParser.DebugUtils">
            <summary>
            A collection of utility methods to assist in debugging
            </summary>
        </member>
        <member name="E:CilBytecodeParser.DebugUtils.Error">
            <summary>
            Raised when error occurs in one of the methods in this class
            </summary>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.GetExecutingInstruction(System.Diagnostics.StackFrame)">
            <summary>
            Gets an currently executing instruction corresponding to the specified stack frame
            </summary>
            <param name="sf">A stack frame object</param>
            <exception cref="T:System.ArgumentNullException">Source stack frame is null</exception>
            <returns>CIL instruction</returns>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.GetLastExecutedInstruction(System.Diagnostics.StackFrame)">
            <summary>
            Gets a last executed instruction corresponding to the specified stack frame
            </summary>
            <param name="sf">A stack frame object</param>
            <exception cref="T:System.ArgumentNullException">Source stack frame is null</exception>
            <returns>CIL instruction</returns>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.GetLastExecutedInstruction">
            <summary>
            Gets a last executed instruction at the calling point of the code
            </summary>
            <returns>CIL instruction</returns>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.GetStackTrace">
            <summary>
            Gets a stack trace at the calling point represented as CIL instructions
            </summary>
            <returns>A collection of CIL instructions corresponding to frames of a callstack</returns>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.PrintStackTrace">
            <summary>
            Prints a stack trace at the calling point, represented as a CIL code, into the standard output
            </summary>        
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.GetStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Gets a repesentation of the call stack as CIL instructions
            </summary>
            <param name="trace">Stack trace object</param>
            <exception cref="T:System.ArgumentNullException">Source stack trace is null</exception>
            <returns>A collection of CIL instructions</returns>
        </member>
        <member name="M:CilBytecodeParser.DebugUtils.PrintStackTrace(System.Diagnostics.StackTrace,System.IO.TextWriter)">
            <summary>
            Prints a stack trace, represented as a CIL code, into the specified TextWriter
            </summary>
            <param name="trace">Source stack trace object</param>
            <param name="target">Target TextWriter object. If null or omitted, standard output will be used.</param>
            <exception cref="T:System.ArgumentNullException">Source stack trace is null</exception>
        </member>
        <member name="T:CilBytecodeParser.CilGraph">
            <summary>
            Represents a CIL graph, a graph that reflects a flow of control between CIL instructions in the method
            </summary>
            <remarks>
            CIL graph is a directed graph with nodes representing CIL instructions withing method body and edges representing how control flows between them when runtime executes method. The root of the graph is the first instruction of the method. Each node stores a reference to the next instruction (which is usually executed after it) and, if it's a jump instruction, a reference to the branch target (an instruction that would be executed if the condition for the jump is met). For convenience, each instruction serving as branch target is assigned a label, a string that identify it. The last instruction of the method has null as its next instruction reference.
            
            Use <see cref="M:CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)"/> method to create CIL graph for a method.
            </remarks>
        </member>
        <member name="E:CilBytecodeParser.CilGraph.Error">
            <summary>
            Raised when error occurs in one of the methods in this class
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilGraph.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)">
            <summary>
            Raises Error event
            </summary>
            <param name="sender">object that generated event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="F:CilBytecodeParser.CilGraph._Root">
            <summary>
            A root node of this graph (the first instruction in the method)
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilGraph._Method">
            <summary>
            A method object for which this graph is built
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilGraph.#ctor(CilBytecodeParser.CilGraphNode,System.Reflection.MethodBase)">
            <summary>
            Creates new CIL graph. (Insfrastructure; not intended for user code)
            </summary>
            <param name="root">Root node</param>
            <param name="mb">Method associated with this graph object</param>
            <remarks>Use <see cref="M:CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)"/> method to create CIL graph for a method instead of using this contructor.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraph.Root">
            <summary>
            Gets a root node of this graph (the first instruction in the method)
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilGraph.Method">
            <summary>
            Gets a method for which this graph is built
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilGraph.ToString">
            <summary>
            Returns CIL code corresponding to this graph as a string
            </summary>
            <remarks>The CIL code returned by this API is intended mainly for reading, not compiling. It is not guaranteed to be a valid input for CIL assembler.</remarks>
            <returns>A string of CIL code</returns>
        </member>
        <member name="T:CilBytecodeParser.CilGraphNode">
            <summary>
            Represents a node in the CIL graph. A node describes an instruction and its connection with other instructions
            </summary>
            <remarks>See <see cref="T:CilBytecodeParser.CilGraph"/> class documentation for more information about CIL graphs.</remarks>
        </member>
        <member name="F:CilBytecodeParser.CilGraphNode._Instruction">
            <summary>
            CIL instruction associated with this node
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilGraphNode._Name">
            <summary>
            Optional label name associated with this node
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilGraphNode._Previous">
            <summary>
            A reference to the node that represents instruction directly preceding current instruction in the method bytecode
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilGraphNode._Next">
            <summary>
            A reference to the node that represents instruction directly following current instruction in the method bytecode
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilGraphNode._BranchTarget">
            <summary>
            A reference to the node that represents instruction which is a target of the current instruction, if applicable
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNode.Instruction">
            <summary>
            Gets CIL instruction associated with this node
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNode.Name">
            <summary>
            Gets label name associated with this node
            </summary>
            <remarks>Label names are assigned to instruction that serve as branch targets for convenience. If the instruction is not used as target, the value is empty string.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNode.Previous">
            <summary>
            Gets a reference to the node that represents instruction directly preceding current instruction in the method bytecode
            </summary>
            <remarks>For the first instruction in the method body, the value is null.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNode.Next">
            <summary>
            Gets a reference to the node that represents instruction directly following current instruction in the method bytecode
            </summary>
            <remarks>Next instruction will be normally executed after current one, unless it is a jump instruction and the condition for jump is met. For the last instruction of the method body, the value is null.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNode.BranchTarget">
            <summary>
            Gets a reference to the node that represents instruction which is a target of the current instruction, if applicable
            </summary>
            <remarks>Branch target is an instruction which would be called after current one if the condition for jump instruction is met. For non-jump instructions, the value is null.</remarks>
        </member>
        <member name="M:CilBytecodeParser.CilGraphNode.#ctor">
            <summary>
            Creates new CilGraphNode object
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilGraphNode.ToString">
            <summary>
            Returns text representation of this node as a line of CIL code
            </summary>
            <returns>String that contatins a text representation of this node</returns>
        </member>
        <member name="T:CilBytecodeParser.CilGraphNodeMutable">
            <summary>
            A mutable version of CilGraphNode class
            </summary>    
            <remarks>Graph nodes are exposed as immutable <see cref="T:CilBytecodeParser.CilGraphNode"/> objects by API of this library, such as <see cref="M:CilBytecodeParser.CilAnalysis.GetGraph(System.Reflection.MethodBase)"/> method, because usually you don't need to alter their properties. However, these nodes are created as mutable objects and their actual runtime type is CilGraphNodeMutable; you can cast them to that type if you need to set their properties.</remarks>
        </member>
        <member name="M:CilBytecodeParser.CilGraphNodeMutable.#ctor(CilBytecodeParser.CilInstruction)">
            <summary>
            Creates new mutable CIL graph node object
            </summary>
            <param name="instr">An instruction associated with this node</param>
            <exception cref="T:System.ArgumentNullException">instr argument is null</exception>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNodeMutable.Instruction">
            <summary>
            Gets or sets CIL instruction associated with this node
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNodeMutable.Name">
            <summary>
            Gets or sets label name associated with this node
            </summary>
            <remarks>Label names are assigned to instruction that serve as branch targets for convenience. If the instruction is not used as target, the value is empty string.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNodeMutable.Previous">
            <summary>
            Gets or sets a reference to the node that represents instruction directly preceding current instruction in the method bytecode
            </summary>
            <remarks>For the first instruction in the method body, the value is null.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNodeMutable.Next">
            <summary>
            Gets or sets a reference to the node that represents instruction directly following current instruction in the method bytecode
            </summary>
            <remarks>Next instruction will be normally executed after current one, unless it is a jump instruction and the condition for jump is met. For the last instruction of the method body, the value is null.</remarks>
        </member>
        <member name="P:CilBytecodeParser.CilGraphNodeMutable.BranchTarget">
            <summary>
            Gets or sets a reference to the node that represents instruction which is a target of the current instruction, if applicable
            </summary>
            <remarks>Branch target is an instruction which would be called after current one if the condition for jump instruction is met. For non-jump instructions, the value is null.</remarks>
        </member>
        <member name="T:CilBytecodeParser.CilInstruction">
            <summary>
            Represents CIL instruction, a main structural element of the method body which consists of operation code and operand.
            </summary>
            <remarks>To retreive a collection of CIL instructions for the specified method, use methods of <see cref="T:CilBytecodeParser.CilReader"/> class.</remarks>
        </member>
        <member name="E:CilBytecodeParser.CilInstruction.Error">
            <summary>
            Raised when error occurs in one of the methods in this class
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilInstruction.OnError(System.Object,CilBytecodeParser.CilErrorEventArgs)">
            <summary>
            Raises a 'Error' event
            </summary>
            <param name="sender">Object that caused this event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._Method">
            <summary>
            A reference to a method which this instruction belongs to
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._OpCode">
            <summary>
            Opcode of this instruction
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._Operand">
            <summary>
            Operand object of this instruction, if applicable
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._OperandSize">
            <summary>
            Size, in bytes, of this instruction's operand
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._ByteOffset">
            <summary>
            Byte offset of this instruction from the beginning of the method body
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilInstruction._OrdinalNumber">
            <summary>
            Ordinal number of the place this instruction takes in method body, starting from one.
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.Method">
            <summary>
            Gets a reference to a method which this instruction belongs to
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.OpCode">
            <summary>
            Gets the operation code (opcode) of this instruction
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.Operand">
            <summary>
            Gets the operand object of this instruction
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.OperandSize">
            <summary>
            Gets the size, in bytes, of this instruction's operand
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.ByteOffset">
            <summary>
            Gets a byte offset of this instruction from the beginning of the method body
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.OrdinalNumber">
            <summary>
            Gets ordinal number of the place this instruction takes in method body, starting from one.
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.Code">
            <summary>
            Gets opcode of this instruction as a numerical value
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.Name">
            <summary>
            Gets a name of this instruction
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.TotalSize">
            <summary>
            Gets total size, in bytes, that this instruction occupies in the method body
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilInstruction.#ctor(System.Reflection.Emit.OpCode,System.Object,System.UInt32,System.UInt32,System.UInt32,System.Reflection.MethodBase)">
            <summary>
            Creates a new CilInstruction object initialized with specified field values (infrastructure)
            </summary>
            <param name="opc">Opcode</param>
            <param name="operand">Operand object</param>
            <param name="opsize">Operand size</param>
            <param name="byteoffset">Byte offset</param>
            <param name="ordinalnum">Ordinal number</param>
            <param name="mb">Owning method</param>
            <remarks>Do not use this constructor directly. To retreive a collection of CIL instructions for the specified method, use methods of <see cref="T:CilBytecodeParser.CilReader"/> class instead.</remarks>
        </member>
        <member name="M:CilBytecodeParser.CilInstruction.CreateEmptyInstruction(System.Reflection.MethodBase)">
            <summary>
            Creates new CilInstruction object that represents an empty instruction
            </summary>
            <param name="mb">Owning method</param>
            <returns>Empty CilInstruction object</returns>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.OperandType">
            <summary>
            Gets this instruction's operand type, or null if there's no operand
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.ReferencedMember">
            <summary>
            Gets a member (type, field or method) referenced by this instruction, if applicable
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.ReferencedType">
            <summary>
            Gets a type referenced by this instruction, if applicable
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilInstruction.ReferencedString">
            <summary>
            Gets a string literal referenced by this instruction, if applicable
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilInstruction.ToString">
            <summary>
            Returns a text representation of this instruction as a line of CIL code
            </summary>
            <returns>String containing text representation of this instruction</returns>
        </member>
        <member name="T:CilBytecodeParser.CilReaderState">
            <summary>
            Represents a state of CilReader object
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReaderState.Reading">
            <summary>
            CilReader can read instructions
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReaderState.Error">
            <summary>
            CilReader is in a faulty state, because previous read operation resulted in error
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReaderState.End">
            <summary>
            CilReader reached the end of its source data
            </summary>
        </member>
        <member name="T:CilBytecodeParser.CilParserException">
            <summary>
            Represents an error during CIL reading operation
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilParserException.#ctor(System.String)">
            <summary>
            Creates new CilParserException object
            </summary>
            <param name="message">Error message for this exception</param>
        </member>
        <member name="T:CilBytecodeParser.CilReader">
            <summary>
            Sequentially processes CIL bytecode, reading instructions from the method body
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReader.cilbytes">
            <summary>
            Raw CIL bytes which this object processes
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReader.current_pos">
            <summary>
            Current position in the source array
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReader.current_ordinal">
            <summary>
            An ordinal number of the next instruction
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReader.state">
            <summary>
            Current state of this object
            </summary>
        </member>
        <member name="F:CilBytecodeParser.CilReader.method">
            <summary>
            A method which body this object reads
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilReader.Method">
            <summary>
            Gets a method which body this CilReader object reads
            </summary>
        </member>
        <member name="P:CilBytecodeParser.CilReader.State">
            <summary>
            Gets a current state of this CilReader object
            </summary>
        </member>
        <member name="M:CilBytecodeParser.CilReader.#ctor(System.Byte[])">
            <summary>
            Creates new CilReader object that uses specified byte array as source
            </summary>
            <exception cref="T:System.ArgumentNullException">Source array is null</exception>
            <exception cref="T:System.ArgumentException">Source array is empty</exception>
            <param name="src">An array of bytecode to read from</param>
        </member>
        <member name="M:CilBytecodeParser.CilReader.#ctor(System.Reflection.MethodBase)">
            <summary>
            Creates new CilReader that uses a body of specified method as a source
            </summary>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">GetMethodBody returned null</exception>
            <param name="src">A MethodBase object that specifies a method to read from</param>
        </member>
        <member name="M:CilBytecodeParser.CilReader.Read">
            <summary>
            Reads next instruction from source
            </summary>
            <exception cref="T:System.InvalidOperationException">This CilReader is in faulty state or reached the end of source byte array</exception>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <returns>CilInstruction retreived from the source</returns>
        </member>
        <member name="M:CilBytecodeParser.CilReader.ReadAll">
            <summary>
            Reads all instructions from source until the end is reached
            </summary>        
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Unknown error occured</exception>
            <returns>A collection of CIL instructions</returns>
        </member>
        <member name="M:CilBytecodeParser.CilReader.GetInstructions(System.Byte[])">
            <summary>
            Reads all instructions from specified array of bytecode
            </summary>
            <param name="src">Source byte array</param>
            <exception cref="T:System.ArgumentNullException">Source array is null</exception>
            <exception cref="T:System.ArgumentException">Source array is empty</exception>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Unknown error occured</exception>
            <returns>A collection of CIL instructions</returns>
        </member>
        <member name="M:CilBytecodeParser.CilReader.GetInstructions(System.Reflection.MethodBase)">
            <summary>
            Reads all instructions from specified method's body
            </summary>
            <param name="m">Source method</param>
            <exception cref="T:System.ArgumentNullException">Source method is null</exception>        
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <returns>A collection of CIL instructions that form the body of this method</returns>
        </member>
        <member name="T:CilBytecodeParser.Extensions.CilExtensions">
            <summary>
            A collection of extension methods that provide an alternative syntax for some static methods of this library
            </summary>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetCilGraph(System.Reflection.MethodBase)">
            <summary>
            Returns <see cref="T:CilBytecodeParser.CilGraph"/> that represents this method
            </summary>
            <param name="m">Method for which to build CIL graph</param>
            <returns>CIL graph object</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetCilText(System.Reflection.MethodBase)">
            <summary>
            Returns this method's CIL code as string
            </summary>
            <param name="m">Method for which to retreive CIL</param>
            <remarks>Alias for <see cref="M:CilBytecodeParser.CilAnalysis.MethodToText(System.Reflection.MethodBase)"/> method. The CIL code returned by this API is intended mainly for reading, not compiling. It is not guaranteed to be a valid input for CIL assembler.</remarks>
            <returns>CIL code string</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetInstructions(System.Reflection.MethodBase)">
            <summary>
            Retrieves all instructions from the method's body
            </summary>
            <param name="m">Source method</param>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <returns>A collection of CIL instructions that form the body of this method</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetExecutingInstruction(System.Diagnostics.StackFrame)">
            <summary>
            Gets an currently executing instruction corresponding to this stack frame
            </summary>
            <param name="sf">A stack frame object</param>
            <returns>CIL instruction</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetLastExecutedInstruction(System.Diagnostics.StackFrame)">
            <summary>
            Gets a last executed instruction corresponding to this stack frame
            </summary>
            <param name="sf">A stack frame object</param>
            <returns>CIL instruction</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetInstructions(System.Diagnostics.StackTrace)">
            <summary>
            Gets a repesentation of this stack trace as CIL instructions
            </summary>
            <param name="trace">Stack trace object</param>
            <returns>A collection of CIL instructions</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.PrintInstructions(System.Diagnostics.StackTrace,System.IO.TextWriter)">
            <summary>
            Prints this stack trace, represented as a CIL code, into the specified TextWriter
            </summary>
            <param name="trace">Source stack trace object</param>
            <param name="target">Target TextWriter object. If null or omitted, standard output will be used.</param>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMethods(System.Reflection.MethodBase)">
            <summary>
            Gets all methods that are referenced by this method
            </summary>
            <param name="mb">Method for which to retreive referenced methods</param>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMethods(System.Type)">
            <summary>
            Get all methods that are referenced by the code of this type
            </summary>
            <param name="t">Type for which to retreive referenced methods</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMethods(System.Reflection.Assembly)">
            <summary>
            Get all methods that are referenced by the code in the specified assembly
            </summary>
            <param name="ass">Assembly for which to retreive referenced methods</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of referenced methods</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Reflection.MethodBase)">
            <summary>
            Gets all members (fields or methods) referenced by specified method
            </summary>
            <param name="mb">Method for which to retreive referenced members</param>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Type)">
            <summary>
            Gets all members referenced by the code of specified type
            </summary>
            <param name="t">Type for which to retreive referenced memmbers</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Reflection.Assembly)">
            <summary>
            Gets all members referenced by the code of specified assembly
            </summary>
            <param name="ass">Assembly for which to retreive referenced members</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Reflection.MethodBase,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members (fields or methods) referenced by specified method that match specified criteria
            </summary>
            <param name="mb">Method for which to retreive referenced members</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <exception cref="T:System.NotSupportedException">CilReader encountered unknown opcode</exception>
            <exception cref="T:CilBytecodeParser.CilParserException">Failed to retreive method body for the method</exception>
            <remarks>Referenced member is a member that appears as an operand of instruction in source method's body. For example, if the source method calls `Foo` method or creates delegate pointing to `Foo`, `Foo` is referenced by the source method.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Type,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members referenced by the code of specified type that match specified criteria
            </summary>
            <param name="t">Type for which to retreive referenced memmbers</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the type's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
        <member name="M:CilBytecodeParser.Extensions.CilExtensions.GetReferencedMembers(System.Reflection.Assembly,CilBytecodeParser.MemberCriteria)">
            <summary>
            Gets members referenced by the code of specified assembly that match specified criteria
            </summary>
            <param name="ass">Assembly for which to retreive referenced members</param>
            <param name="flags">A combination of bitwise flags that control what kind of members are retreived</param>
            <remarks>Referenced member is a member that appears as an operand of instruction in any of the assembly's methods.</remarks>
            <returns>A collection of MemberInfo objects</returns>
        </member>
    </members>
</doc>
